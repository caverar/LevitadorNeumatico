
5.SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000424  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000424  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003c7  00000000  00000000  0001044d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000e0  00000000  00000000  00010814  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000108f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe2a  00000000  00000000  00010970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004a9  00000000  00000000  0002079a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053d7c  00000000  00000000  00020c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000749bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  00074a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000404 	.word	0x08000404

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000404 	.word	0x08000404

08000170 <main>:
#include <stm32f103xb.h>

int main(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//--Inicialización interface debug---------------------------------------------------------------------

	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;	        // AFIOEN = 1, activar reloj de modulo AFIO
 8000174:	4b77      	ldr	r3, [pc, #476]	; (8000354 <main+0x1e4>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a76      	ldr	r2, [pc, #472]	; (8000354 <main+0x1e4>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;			// SWJ_CFG = 010 JTAG disabled y SW-DP enable
 8000180:	4b75      	ldr	r3, [pc, #468]	; (8000358 <main+0x1e8>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a74      	ldr	r2, [pc, #464]	; (8000358 <main+0x1e8>)
 8000186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800018a:	6053      	str	r3, [r2, #4]

	//--Inicializacion de reloj externo a 72 Mhz-----------------------------------------------------------

	FLASH->ACR |=FLASH_ACR_LATENCY_1;			// Ajustar Latencia de memoria Flash en 2 (Debido al ajuste de alta frecuencia)
 800018c:	4b73      	ldr	r3, [pc, #460]	; (800035c <main+0x1ec>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a72      	ldr	r2, [pc, #456]	; (800035c <main+0x1ec>)
 8000192:	f043 0302 	orr.w	r3, r3, #2
 8000196:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON; 					// HSE0N = 1, Habilitar reloj externo
 8000198:	4b6e      	ldr	r3, [pc, #440]	; (8000354 <main+0x1e4>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a6d      	ldr	r2, [pc, #436]	; (8000354 <main+0x1e4>)
 800019e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a2:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));   		// HSERDY = 1 ?, Esperar a que el reloj externo se estabilice
 80001a4:	bf00      	nop
 80001a6:	4b6b      	ldr	r3, [pc, #428]	; (8000354 <main+0x1e4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f9      	beq.n	80001a6 <main+0x36>
    RCC->CFGR |= RCC_CFGR_PLLSRC; 				// PLLSRC=1, Seleccionar reloj externo como fuente de reloj de PLL
 80001b2:	4b68      	ldr	r3, [pc, #416]	; (8000354 <main+0x1e4>)
 80001b4:	685b      	ldr	r3, [r3, #4]
 80001b6:	4a67      	ldr	r2, [pc, #412]	; (8000354 <main+0x1e4>)
 80001b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001bc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;				// PLLMUL=7, Seleccionar 9 como factor PLL
 80001be:	4b65      	ldr	r3, [pc, #404]	; (8000354 <main+0x1e4>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	4a64      	ldr	r2, [pc, #400]	; (8000354 <main+0x1e4>)
 80001c4:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001c8:	6053      	str	r3, [r2, #4]
    RCC->CR	  |= RCC_CR_PLLON;					// PLLON=1 Encender PLL
 80001ca:	4b62      	ldr	r3, [pc, #392]	; (8000354 <main+0x1e4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a61      	ldr	r2, [pc, #388]	; (8000354 <main+0x1e4>)
 80001d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d4:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));			// PLLRDY=1 ? Esperar a que se ajuste el PLL
 80001d6:	bf00      	nop
 80001d8:	4b5e      	ldr	r3, [pc, #376]	; (8000354 <main+0x1e4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f9      	beq.n	80001d8 <main+0x68>
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; 			// PPRE1=0b100, Ajustar el prescaler de APB1, para obtener 36Mhz
 80001e4:	4b5b      	ldr	r3, [pc, #364]	; (8000354 <main+0x1e4>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	4a5a      	ldr	r2, [pc, #360]	; (8000354 <main+0x1e4>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_1;    				// SW=2, PLL seleccionado como reloj del sistema
 80001f0:	4b58      	ldr	r3, [pc, #352]	; (8000354 <main+0x1e4>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a57      	ldr	r2, [pc, #348]	; (8000354 <main+0x1e4>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6053      	str	r3, [r2, #4]
    while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); 	// SWS=2? , Esperar a que el reloj del sistema se configure
 80001fc:	bf00      	nop
 80001fe:	4b55      	ldr	r3, [pc, #340]	; (8000354 <main+0x1e4>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <main+0x8e>

    //--Inicialización SP1-----------------------------------------------------------------------------------

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;         // SPI1EN=1, Activación de reloj SPI1
 800020a:	4b52      	ldr	r3, [pc, #328]	; (8000354 <main+0x1e4>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a51      	ldr	r2, [pc, #324]	; (8000354 <main+0x1e4>)
 8000210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000214:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			// IOPAEN = 1, Habilitar reloj de GPIOA
 8000216:	4b4f      	ldr	r3, [pc, #316]	; (8000354 <main+0x1e4>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	4a4e      	ldr	r2, [pc, #312]	; (8000354 <main+0x1e4>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	6193      	str	r3, [r2, #24]

    // Configuración de pines

    GPIOA->CRL   = 0;                           // Limpiar configuración de puerto A
 8000222:	4b4f      	ldr	r3, [pc, #316]	; (8000360 <main+0x1f0>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
    // Configuración del CS
    GPIOA->CRL   |= GPIO_CRL_MODE4;            	// MODE4 = 0b11, Modo salida 50 MHz
 8000228:	4b4d      	ldr	r3, [pc, #308]	; (8000360 <main+0x1f0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a4c      	ldr	r2, [pc, #304]	; (8000360 <main+0x1f0>)
 800022e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000232:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF4_1;           	// CNF4= 0b10, Modo alternado push-pull
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <main+0x1f0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a49      	ldr	r2, [pc, #292]	; (8000360 <main+0x1f0>)
 800023a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800023e:	6013      	str	r3, [r2, #0]
    // Configuración de CLK
    GPIOA->CRL   |= GPIO_CRL_MODE5;            	// MODE5 = 0b11, Modo salida 50 MHz
 8000240:	4b47      	ldr	r3, [pc, #284]	; (8000360 <main+0x1f0>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a46      	ldr	r2, [pc, #280]	; (8000360 <main+0x1f0>)
 8000246:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF5_1;           	// CNF5= 0b10, Modo alternado push-pull
 800024c:	4b44      	ldr	r3, [pc, #272]	; (8000360 <main+0x1f0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a43      	ldr	r2, [pc, #268]	; (8000360 <main+0x1f0>)
 8000252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000256:	6013      	str	r3, [r2, #0]
    // Configuración de MISO
    GPIOA->CRL   &= ~GPIO_CRL_MODE6;           	// MODE6 = 0b00, Modo de entrada
 8000258:	4b41      	ldr	r3, [pc, #260]	; (8000360 <main+0x1f0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a40      	ldr	r2, [pc, #256]	; (8000360 <main+0x1f0>)
 800025e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000262:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF6_1;           	// MODE6 = 0b10, Modo de entrada pull-up/pull-down
 8000264:	4b3e      	ldr	r3, [pc, #248]	; (8000360 <main+0x1f0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a3d      	ldr	r2, [pc, #244]	; (8000360 <main+0x1f0>)
 800026a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800026e:	6013      	str	r3, [r2, #0]
    // Configuración de MOSI
    GPIOA->CRL 	 |= GPIO_CRL_MODE7;            	// MODE7 = 0b11, Modo salida 50 MHz
 8000270:	4b3b      	ldr	r3, [pc, #236]	; (8000360 <main+0x1f0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a3a      	ldr	r2, [pc, #232]	; (8000360 <main+0x1f0>)
 8000276:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800027a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL 	 |= GPIO_CRL_CNF7_1;           	// CNF7= 0b10, Modo alternado push-pull
 800027c:	4b38      	ldr	r3, [pc, #224]	; (8000360 <main+0x1f0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a37      	ldr	r2, [pc, #220]	; (8000360 <main+0x1f0>)
 8000282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000286:	6013      	str	r3, [r2, #0]

    // Configuración

    SPI1->CR1    &= ~SPI_CR1_BIDIMODE;        	// BIDIMODE = 0b0, Modo unidereccional
 8000288:	4b36      	ldr	r3, [pc, #216]	; (8000364 <main+0x1f4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a35      	ldr	r2, [pc, #212]	; (8000364 <main+0x1f4>)
 800028e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000292:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_DFF;             	// DFF = 0b0, Trama de datos de 8 bits
 8000294:	4b33      	ldr	r3, [pc, #204]	; (8000364 <main+0x1f4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a32      	ldr	r2, [pc, #200]	; (8000364 <main+0x1f4>)
 800029a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800029e:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_RXONLY;          	// RXONLY = 0b0, Comunicación full duplex
 80002a0:	4b30      	ldr	r3, [pc, #192]	; (8000364 <main+0x1f4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2f      	ldr	r2, [pc, #188]	; (8000364 <main+0x1f4>)
 80002a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002aa:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_SSM;              	// SSM = 0b1, CS por software
 80002ac:	4b2d      	ldr	r3, [pc, #180]	; (8000364 <main+0x1f4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a2c      	ldr	r2, [pc, #176]	; (8000364 <main+0x1f4>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_LSBFIRST;        	// LSBFIRST = 0b0, Bit más significativo primero
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <main+0x1f4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a29      	ldr	r2, [pc, #164]	; (8000364 <main+0x1f4>)
 80002be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002c2:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_BR_2;             	// BR= 0b100, PCLK/32 = 2.250 MHz
 80002c4:	4b27      	ldr	r3, [pc, #156]	; (8000364 <main+0x1f4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a26      	ldr	r2, [pc, #152]	; (8000364 <main+0x1f4>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_MSTR;             	// MSRT = 0b1, Modo maestro
 80002d0:	4b24      	ldr	r3, [pc, #144]	; (8000364 <main+0x1f4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a23      	ldr	r2, [pc, #140]	; (8000364 <main+0x1f4>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6013      	str	r3, [r2, #0]
    SPI1->CR2    |= SPI_CR2_SSOE;             	// SS0E = 0b1, Habilitar CS
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <main+0x1f4>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <main+0x1f4>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6053      	str	r3, [r2, #4]
    SPI1->CR1    |= SPI_CR1_SPE;              	// SPE = 0b1, Activar SPI
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <main+0x1f4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <main+0x1f4>)
 80002ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f2:	6013      	str	r3, [r2, #0]

    while (1){
    	SPI1->CR1  &= ~SPI_CR1_SSI;           	// SSI = 0b0, Activar CS
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <main+0x1f4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <main+0x1f4>)
 80002fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002fe:	6013      	str	r3, [r2, #0]
    	while (!(SPI1->SR & SPI_SR_TXE));      	// TXE = 1?, Esperar que el buffer Tx esté vacío
 8000300:	bf00      	nop
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <main+0x1f4>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <main+0x192>
    	SPI1->DR = 'H';							// Enviar Datos SPI
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <main+0x1f4>)
 8000310:	2248      	movs	r2, #72	; 0x48
 8000312:	60da      	str	r2, [r3, #12]
    	while (!(SPI1->SR & SPI_SR_TXE));      	// TXE = 1?, Esperar que el buffer Tx esté vacío
 8000314:	bf00      	nop
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <main+0x1f4>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <main+0x1a6>
    	SPI1->DR = '0';							// Enviar Datos SPI
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <main+0x1f4>)
 8000324:	2230      	movs	r2, #48	; 0x30
 8000326:	60da      	str	r2, [r3, #12]
    	while (!(SPI1->SR & SPI_SR_TXE));      	// TXE = 1?, Esperar que el buffer Tx esté vacío
 8000328:	bf00      	nop
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <main+0x1f4>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <main+0x1ba>
    	SPI1->DR = 'L';							// Enviar Datos SPI
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <main+0x1f4>)
 8000338:	224c      	movs	r2, #76	; 0x4c
 800033a:	60da      	str	r2, [r3, #12]
    	while (!(SPI1->SR & SPI_SR_TXE));      	// TXE = 1?, Esperar que el buffer Tx esté vacío
 800033c:	bf00      	nop
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <main+0x1f4>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <main+0x1ce>
    	SPI1->DR = 'A';							// Enviar Datos SPI
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <main+0x1f4>)
 800034c:	2241      	movs	r2, #65	; 0x41
 800034e:	60da      	str	r2, [r3, #12]
    	SPI1->CR1  &= ~SPI_CR1_SSI;           	// SSI = 0b0, Activar CS
 8000350:	e7d0      	b.n	80002f4 <main+0x184>
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40010000 	.word	0x40010000
 800035c:	40022000 	.word	0x40022000
 8000360:	40010800 	.word	0x40010800
 8000364:	40013000 	.word	0x40013000

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490e      	ldr	r1, [pc, #56]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0b      	ldr	r4, [pc, #44]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000392:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff fee9 	bl	8000170 <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	2500      	movs	r5, #0
 80003c0:	4e0c      	ldr	r6, [pc, #48]	; (80003f4 <__libc_init_array+0x38>)
 80003c2:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c4:	1ba4      	subs	r4, r4, r6
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	f000 f81a 	bl	8000404 <_init>
 80003d0:	2500      	movs	r5, #0
 80003d2:	4e0a      	ldr	r6, [pc, #40]	; (80003fc <__libc_init_array+0x40>)
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <__libc_init_array+0x44>)
 80003d6:	1ba4      	subs	r4, r4, r6
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	42a5      	cmp	r5, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003e4:	4798      	blx	r3
 80003e6:	3501      	adds	r5, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ee:	4798      	blx	r3
 80003f0:	3501      	adds	r5, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
