
Lab1F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eb0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fe0  08000fe0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fe0  08000fe0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe0  08000fe0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe0  08000fe0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08000ff8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000ff8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000100a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000219  00000000  00000000  00021043  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00021260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001074d  00000000  00000000  000212e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000006c6  00000000  00000000  00031a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000570fc  00000000  00000000  000320fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000891f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f4  00000000  00000000  00089274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fc8 	.word	0x08000fc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000fc8 	.word	0x08000fc8

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <main>:
unsigned int Ti=0;


void wait_us(unsigned int time);

int main(void){
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0

	//--Inicialización interface debug---------------------------------------------------------------------

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; 					// AFIOEN = 1, activar reloj de modulo AFIO
 800075e:	4b48      	ldr	r3, [pc, #288]	; (8000880 <main+0x128>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a47      	ldr	r2, [pc, #284]	; (8000880 <main+0x128>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;						// SWJ_CFG = 010 JTAG disabled y SW-DP enable
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <main+0x12c>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4a45      	ldr	r2, [pc, #276]	; (8000884 <main+0x12c>)
 8000770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000774:	6053      	str	r3, [r2, #4]

	//--Inicializacion de reloj externo a 72 Mhz-----------------------------------------------------------

	FLASH->ACR |=FLASH_ACR_LATENCY_1;						// Ajustar Latencia de memoria Flash en 2 (Debido al ajuste de alta frecuencia)
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <main+0x130>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a43      	ldr	r2, [pc, #268]	; (8000888 <main+0x130>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON; 								// HSE0N = 1, Habilitar reloj externo
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <main+0x128>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a3e      	ldr	r2, [pc, #248]	; (8000880 <main+0x128>)
 8000788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078c:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));   					// HSERDY = 1 ?, Esperar a que el reloj externo se estabilice
 800078e:	bf00      	nop
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <main+0x128>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <main+0x38>
    RCC->CFGR |= RCC_CFGR_PLLSRC; 							// PLLSRC=1, Seleccionar reloj externo como fuente de reloj de PLL
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <main+0x128>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a37      	ldr	r2, [pc, #220]	; (8000880 <main+0x128>)
 80007a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;							// PLLMUL=7, Seleccionar 9 como factor PLL
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x128>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4a34      	ldr	r2, [pc, #208]	; (8000880 <main+0x128>)
 80007ae:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80007b2:	6053      	str	r3, [r2, #4]
    RCC->CR	  |= RCC_CR_PLLON;								// PLLON=1 Encender PLL
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <main+0x128>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <main+0x128>)
 80007ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007be:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));						// PLLRDY=1 ? Esperar a que se ajuste el PLL
 80007c0:	bf00      	nop
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <main+0x128>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <main+0x6a>
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; 						// PPRE1=0b100, Ajustar el prescaler de APB1, para obtener 36Mhz
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x128>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <main+0x128>)
 80007d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_1;    							// SW=2, PLL seleccionado como reloj del sistema
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <main+0x128>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <main+0x128>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6053      	str	r3, [r2, #4]
    while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); 				// SWS=2? , Esperar a que el reloj del sistema se configure
 80007e6:	bf00      	nop
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <main+0x128>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f9      	beq.n	80007e8 <main+0x90>

	//--C13
    RCC->APB2ENR |=RCC_APB2ENR_IOPCEN;						// IOPCEN=1, Habilitar reloj del Puerto A
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <main+0x128>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <main+0x128>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6193      	str	r3, [r2, #24]
    GPIOC->CRH = 0;											// Limpiar el puerto C
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0x134>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
    GPIOC->CRH &= GPIO_CRH_MODE13;							// MODE10=0x11, PC13 en modo de salida
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <main+0x134>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4a20      	ldr	r2, [pc, #128]	; (800088c <main+0x134>)
 800080c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000810:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= ~GPIO_CRH_CNF13;							// CNF0=0x00, PC13 en modo de entrada analoga
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <main+0x134>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <main+0x134>)
 8000818:	f463 0340 	orn	r3, r3, #12582912	; 0xc00000
 800081c:	6053      	str	r3, [r2, #4]
    GPIOC->ODR |= GPIO_ODR_ODR13;							// Salida en uno
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x134>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <main+0x134>)
 8000824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000828:	60d3      	str	r3, [r2, #12]
    //--Inicialización ADC1--------------------------------------------------------------------------------

	RCC->CFGR |= RCC_CFGR_ADCPRE_1;							// ADCPRE=2, Prescaler de reloj ADC = 6, ADCCLK= 12Mhz
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <main+0x128>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <main+0x128>)
 8000830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000834:	6053      	str	r3, [r2, #4]
	RCC->APB2ENR |=RCC_APB2ENR_ADC1EN;						// ADC1EN=1, Habilitar reloj del ADC1
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <main+0x128>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <main+0x128>)
 800083c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000840:	6193      	str	r3, [r2, #24]

	//  Inicilizacion de Pines GPIOA

	RCC->APB2ENR |=RCC_APB2ENR_IOPAEN;						// IOPAEN=1, Habilitar reloj del Puerto A
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <main+0x128>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <main+0x128>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6193      	str	r3, [r2, #24]
	GPIOA->CRH = 0;											// Limpiar el puerto A
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <main+0x138>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
	GPIOA->CRL &= ~GPIO_CRL_MODE0;							// MODE0=0, PA0 en modo de entrada
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <main+0x138>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <main+0x138>)
 800085a:	f023 0303 	bic.w	r3, r3, #3
 800085e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF0;							// CNF0=0, PA0 en modo de entrada analoga
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <main+0x138>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <main+0x138>)
 8000866:	f023 030c 	bic.w	r3, r3, #12
 800086a:	6013      	str	r3, [r2, #0]

	// Configuracion

	ADC1->CR2 |= ADC_CR2_ADON;								// ADON=1, Encendido del conversor
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <main+0x13c>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <main+0x13c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6093      	str	r3, [r2, #8]
	for(unsigned int i=0; i<12;i++);						// Espera de 2 ciclos de reloj de ADC (12 de sistema) para calibracion
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e00f      	b.n	800089e <main+0x146>
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000
 8000888:	40022000 	.word	0x40022000
 800088c:	40011000 	.word	0x40011000
 8000890:	40010800 	.word	0x40010800
 8000894:	40012400 	.word	0x40012400
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3301      	adds	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d9f9      	bls.n	8000898 <main+0x140>
	ADC1->CR2 |= ADC_CR2_CAL;								// CAL=1, Iniciar Calibracion
 80008a4:	4b8d      	ldr	r3, [pc, #564]	; (8000adc <main+0x384>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	4a8c      	ldr	r2, [pc, #560]	; (8000adc <main+0x384>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL);							// CAL=0?, Esperar a que termine la calibracion
 80008b0:	bf00      	nop
 80008b2:	4b8a      	ldr	r3, [pc, #552]	; (8000adc <main+0x384>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <main+0x15a>
	ADC1->CR2 |= ADC_CR2_CONT;								// CONT=1, Activar modo de conversion continua
 80008be:	4b87      	ldr	r3, [pc, #540]	; (8000adc <main+0x384>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	4a86      	ldr	r2, [pc, #536]	; (8000adc <main+0x384>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 &= ~ADC_SQR1_L;								// L=0, Seleccion de un solo canal para secuencia de conversion regular
 80008ca:	4b84      	ldr	r3, [pc, #528]	; (8000adc <main+0x384>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	4a83      	ldr	r2, [pc, #524]	; (8000adc <main+0x384>)
 80008d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80008d4:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;							// SQ1=0, Seleccion de primer(unico^) canal de secuencia de conversion regular
 80008d6:	4b81      	ldr	r3, [pc, #516]	; (8000adc <main+0x384>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	4a80      	ldr	r2, [pc, #512]	; (8000adc <main+0x384>)
 80008dc:	f023 031f 	bic.w	r3, r3, #31
 80008e0:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2 |= ADC_CR2_ADON;								// ADON=1, Iniciar conversion continua
 80008e2:	4b7e      	ldr	r3, [pc, #504]	; (8000adc <main+0x384>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a7d      	ldr	r2, [pc, #500]	; (8000adc <main+0x384>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6093      	str	r3, [r2, #8]

	//--Inicializacion PWM (Timer 3)-----------------------------------------------------------------------
	RCC->APB1ENR |=RCC_APB1ENR_TIM3EN;						// Habilitar reloj de Timer 3
 80008ee:	4b7c      	ldr	r3, [pc, #496]	; (8000ae0 <main+0x388>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a7b      	ldr	r2, [pc, #492]	; (8000ae0 <main+0x388>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	61d3      	str	r3, [r2, #28]

	// Ajuste de pines (pin B1-TIM3-Canal4)

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;						// Habilitar de puerto B
 80008fa:	4b79      	ldr	r3, [pc, #484]	; (8000ae0 <main+0x388>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a78      	ldr	r2, [pc, #480]	; (8000ae0 <main+0x388>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6193      	str	r3, [r2, #24]
	GPIOB->CRL = 0;											// Limpiar el registro
 8000906:	4b77      	ldr	r3, [pc, #476]	; (8000ae4 <main+0x38c>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1;							// MODE1=0b11, PB1 Modo salida 50 MHz
 800090c:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <main+0x38c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <main+0x38c>)
 8000912:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000916:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF1_1;							// CNF1=0b10, PB1 Modo alternado	 push-pull
 8000918:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <main+0x38c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a71      	ldr	r2, [pc, #452]	; (8000ae4 <main+0x38c>)
 800091e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000922:	6013      	str	r3, [r2, #0]


	// COnfiguracion
	TIM3->CCER |= TIM_CCER_CC4E;							// Habilitar canal 4
 8000924:	4b70      	ldr	r3, [pc, #448]	; (8000ae8 <main+0x390>)
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	4a6f      	ldr	r2, [pc, #444]	; (8000ae8 <main+0x390>)
 800092a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092e:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;								// Habilitar Auto recarga de valor precarga
 8000930:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <main+0x390>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a6c      	ldr	r2, [pc, #432]	; (8000ae8 <main+0x390>)
 8000936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093a:	6013      	str	r3, [r2, #0]
	TIM3->CCMR2|=TIM_CCMR2_OC4M_2+TIM_CCMR2_OC4M_1;			// AJustar modo PWM1 en canal 4
 800093c:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <main+0x390>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	4a69      	ldr	r2, [pc, #420]	; (8000ae8 <main+0x390>)
 8000942:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000946:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4PE;							// Habilitar precarga del ciclo de trabajo  en canal 4, del registro sombra al real
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <main+0x390>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a66      	ldr	r2, [pc, #408]	; (8000ae8 <main+0x390>)
 800094e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000952:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = 7;											// Ajustar prescaler en 4
 8000954:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <main+0x390>)
 8000956:	2207      	movs	r2, #7
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1024;										// Ajustar frecuencia f=Fmax/PSC/ARR-> f=8,789Khz
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <main+0x390>)
 800095c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR4 = 512;										// Ajustar ciclo de trabajo al 50% en canal 4
 8000962:	4b61      	ldr	r3, [pc, #388]	; (8000ae8 <main+0x390>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->EGR |= TIM_EGR_UG;								// Reinicializar contador y actualizar registros
 800096a:	4b5f      	ldr	r3, [pc, #380]	; (8000ae8 <main+0x390>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a5e      	ldr	r2, [pc, #376]	; (8000ae8 <main+0x390>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;								// Habilitar contador
 8000976:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <main+0x390>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a5b      	ldr	r2, [pc, #364]	; (8000ae8 <main+0x390>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6013      	str	r3, [r2, #0]

	//--Inicialización UART1-------------------------------------------------------------------------------

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 					// USART1EN=1, Activación de reloj UART1
 8000982:	4b57      	ldr	r3, [pc, #348]	; (8000ae0 <main+0x388>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a56      	ldr	r2, [pc, #344]	; (8000ae0 <main+0x388>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6193      	str	r3, [r2, #24]
	USART1->CR1 |= USART_CR1_UE;       						// UE=1, Activación UART1
 800098e:	4b57      	ldr	r3, [pc, #348]	; (8000aec <main+0x394>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	4a56      	ldr	r2, [pc, #344]	; (8000aec <main+0x394>)
 8000994:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000998:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_M;  							// M=0, Tamaño de palabra 8 bits
 800099a:	4b54      	ldr	r3, [pc, #336]	; (8000aec <main+0x394>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4a53      	ldr	r2, [pc, #332]	; (8000aec <main+0x394>)
 80009a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a4:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~USART_CR2_STOP;    						// STOP=0, Seleccionar el número de bits de parada
 80009a6:	4b51      	ldr	r3, [pc, #324]	; (8000aec <main+0x394>)
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	4a50      	ldr	r2, [pc, #320]	; (8000aec <main+0x394>)
 80009ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b0:	6113      	str	r3, [r2, #16]

	//	Inicializacion de pines (GPIOA)

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;						// IOPAEN = 1, Habilitar reloj de GPIOA
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <main+0x388>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a4a      	ldr	r2, [pc, #296]	; (8000ae0 <main+0x388>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_MODE9_0;    						// MODE9 = 01, PA9 como salida a 10 MHz
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <main+0x398>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <main+0x398>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;     						// CNF9 = 10, PA9 como salida push pull alternada (salida de periferico)
 80009ca:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <main+0x398>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <main+0x398>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_MODE10;    						// MODE10 = 00, PA10 como entrada
 80009d6:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <main+0x398>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	4a45      	ldr	r2, [pc, #276]	; (8000af0 <main+0x398>)
 80009dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_1;    						// CNF10 = 10, PA10 como entrada push pull
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <main+0x398>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a42      	ldr	r2, [pc, #264]	; (8000af0 <main+0x398>)
 80009e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ec:	6053      	str	r3, [r2, #4]

	//	Baudios 9600, Baudios = 72MHz/16*USARTDIV, USARTDIV = 468,75

	USART1->BRR = (0x1D4C); 								// Parte entera y decimal del preescaler de Baudios
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <main+0x394>)
 80009f0:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80009f4:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= USART_CR1_TE;							// TE=1, Habilitar transmisor
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <main+0x394>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a3c      	ldr	r2, [pc, #240]	; (8000aec <main+0x394>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RE;							// RE=1, Habilitar receptor
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <main+0x394>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	4a39      	ldr	r2, [pc, #228]	; (8000aec <main+0x394>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 |= USART_CR1_RXNEIE;						// RXNEIE=1, Habilitar interrupciones de recepcion

	//	Primera transmision (vacia)

	USART1->DR = (0x04);									// Datos TX UART1
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <main+0x394>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TC)); 					// TC=1? Esperar a que se complete la transmision
 8000a14:	bf00      	nop
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <main+0x394>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f9      	beq.n	8000a16 <main+0x2be>


//-----------------------------------------------------------------------------------------------------


	TIM3->CCR4 =1023;
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <main+0x390>)
 8000a24:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
	//TIM3->CCR4 =1023;

	USART1->DR ='L';										// Datos TX UART1
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <main+0x394>)
 8000a2c:	224c      	movs	r2, #76	; 0x4c
 8000a2e:	605a      	str	r2, [r3, #4]
	//TIM3->CCR4 =0;

	//NVIC_EnableIRQ(USART1_IRQn);							// Habilitar interrupcion de USART1
	while(1){

		if(USART1->SR & USART_SR_RXNE){						// Recepcion
 8000a30:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <main+0x394>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 808f 	beq.w	8000b5c <main+0x404>
			inUSARTdata=USART1->DR;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <main+0x394>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <main+0x39c>)
 8000a46:	601a      	str	r2, [r3, #0]
			switch(indexRX){
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <main+0x3a0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	f200 8081 	bhi.w	8000b54 <main+0x3fc>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <main+0x300>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000a69 	.word	0x08000a69
 8000a5c:	08000a7d 	.word	0x08000a7d
 8000a60:	08000a91 	.word	0x08000a91
 8000a64:	08000aa7 	.word	0x08000aa7
				case 0:
					if(inUSARTdata==0x01) indexRX++;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <main+0x39c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d177      	bne.n	8000b60 <main+0x408>
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <main+0x3a0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <main+0x3a0>)
 8000a78:	6013      	str	r3, [r2, #0]
					break;
 8000a7a:	e071      	b.n	8000b60 <main+0x408>
				case 1:
					if(inUSARTdata==0x01) indexRX++;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0x39c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d16f      	bne.n	8000b64 <main+0x40c>
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <main+0x3a0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <main+0x3a0>)
 8000a8c:	6013      	str	r3, [r2, #0]
					break;
 8000a8e:	e069      	b.n	8000b64 <main+0x40c>
				case 2:
					RXaux=inUSARTdata<<8;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <main+0x39c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <main+0x3a4>)
 8000a98:	6013      	str	r3, [r2, #0]
					indexRX++;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <main+0x3a0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <main+0x3a0>)
 8000aa2:	6013      	str	r3, [r2, #0]
					break;
 8000aa4:	e05f      	b.n	8000b66 <main+0x40e>
				case 3:
					L=RXaux+inUSARTdata;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main+0x3a4>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <main+0x39c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <main+0x3a8>)
 8000ab2:	6013      	str	r3, [r2, #0]
					L=400-L;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <main+0x3a8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <main+0x3a8>)
 8000abe:	6013      	str	r3, [r2, #0]

					Ldata[Ldatai]=L;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <main+0x3ac>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <main+0x3a8>)
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	490f      	ldr	r1, [pc, #60]	; (8000b08 <main+0x3b0>)
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						L=0;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <main+0x3a8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
					for(int i=0;i<10;i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	e02a      	b.n	8000b30 <main+0x3d8>
 8000ada:	bf00      	nop
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40010800 	.word	0x40010800
 8000af4:	20000074 	.word	0x20000074
 8000af8:	20000030 	.word	0x20000030
 8000afc:	20000078 	.word	0x20000078
 8000b00:	20000070 	.word	0x20000070
 8000b04:	20000034 	.word	0x20000034
 8000b08:	20000048 	.word	0x20000048
						L+=Ldata[i]/10;
 8000b0c:	4a7f      	ldr	r2, [pc, #508]	; (8000d0c <main+0x5b4>)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	4a7e      	ldr	r2, [pc, #504]	; (8000d10 <main+0x5b8>)
 8000b16:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1a:	1092      	asrs	r2, r2, #2
 8000b1c:	17db      	asrs	r3, r3, #31
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <main+0x5bc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a7b      	ldr	r2, [pc, #492]	; (8000d14 <main+0x5bc>)
 8000b28:	6013      	str	r3, [r2, #0]
					for(int i=0;i<10;i++){
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b09      	cmp	r3, #9
 8000b34:	ddea      	ble.n	8000b0c <main+0x3b4>
					}
					Ldatai= Ldatai<10 ? Ldatai +1 : 0;
 8000b36:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <main+0x5c0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b09      	cmp	r3, #9
 8000b3c:	dc03      	bgt.n	8000b46 <main+0x3ee>
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <main+0x5c0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	e000      	b.n	8000b48 <main+0x3f0>
 8000b46:	2300      	movs	r3, #0
 8000b48:	4a73      	ldr	r2, [pc, #460]	; (8000d18 <main+0x5c0>)
 8000b4a:	6013      	str	r3, [r2, #0]
					indexRX=0;
 8000b4c:	4b73      	ldr	r3, [pc, #460]	; (8000d1c <main+0x5c4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
					break;
 8000b52:	e008      	b.n	8000b66 <main+0x40e>
				default:
					indexRX=0;
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <main+0x5c4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
					break;
 8000b5a:	e004      	b.n	8000b66 <main+0x40e>
			}

		}
 8000b5c:	bf00      	nop
 8000b5e:	e002      	b.n	8000b66 <main+0x40e>
					break;
 8000b60:	bf00      	nop
 8000b62:	e000      	b.n	8000b66 <main+0x40e>
					break;
 8000b64:	bf00      	nop

		if(USART1->SR & USART_SR_TC){						// Transmision
 8000b66:	4b6e      	ldr	r3, [pc, #440]	; (8000d20 <main+0x5c8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80de 	beq.w	8000d30 <main+0x5d8>
			switch(indexTX){
 8000b74:	4b6b      	ldr	r3, [pc, #428]	; (8000d24 <main+0x5cc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	f200 80c2 	bhi.w	8000d02 <main+0x5aa>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <main+0x42c>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000ba9 	.word	0x08000ba9
 8000b88:	08000bbb 	.word	0x08000bbb
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000bdf 	.word	0x08000bdf
 8000b94:	08000c03 	.word	0x08000c03
 8000b98:	08000c3d 	.word	0x08000c3d
 8000b9c:	08000c8b 	.word	0x08000c8b
 8000ba0:	08000ce3 	.word	0x08000ce3
 8000ba4:	08000cf5 	.word	0x08000cf5
				case 0:
					USART1->DR ='L';
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <main+0x5c8>)
 8000baa:	224c      	movs	r2, #76	; 0x4c
 8000bac:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000bae:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <main+0x5cc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a5b      	ldr	r2, [pc, #364]	; (8000d24 <main+0x5cc>)
 8000bb6:	6013      	str	r3, [r2, #0]
					break;
 8000bb8:	e0bb      	b.n	8000d32 <main+0x5da>
				case 1:
					USART1->DR ='M';
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <main+0x5c8>)
 8000bbc:	224d      	movs	r2, #77	; 0x4d
 8000bbe:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <main+0x5cc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a57      	ldr	r2, [pc, #348]	; (8000d24 <main+0x5cc>)
 8000bc8:	6013      	str	r3, [r2, #0]
					break;
 8000bca:	e0b2      	b.n	8000d32 <main+0x5da>
				case 2:
					USART1->DR =':';
 8000bcc:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <main+0x5c8>)
 8000bce:	223a      	movs	r2, #58	; 0x3a
 8000bd0:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <main+0x5cc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a52      	ldr	r2, [pc, #328]	; (8000d24 <main+0x5cc>)
 8000bda:	6013      	str	r3, [r2, #0]
					break;
 8000bdc:	e0a9      	b.n	8000d32 <main+0x5da>
				case 3:
					USART1->DR = (L/1000)+48;
 8000bde:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <main+0x5bc>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <main+0x5d0>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1192      	asrs	r2, r2, #6
 8000bea:	17db      	asrs	r3, r3, #31
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <main+0x5c8>)
 8000bf4:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <main+0x5cc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <main+0x5cc>)
 8000bfe:	6013      	str	r3, [r2, #0]
					break;
 8000c00:	e097      	b.n	8000d32 <main+0x5da>
				case 4:
					USART1->DR = ((L%1000)/100)+48;
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <main+0x5bc>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <main+0x5d0>)
 8000c08:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0c:	1199      	asrs	r1, r3, #6
 8000c0e:	17d3      	asrs	r3, r2, #31
 8000c10:	1acb      	subs	r3, r1, r3
 8000c12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <main+0x5d4>)
 8000c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c22:	1152      	asrs	r2, r2, #5
 8000c24:	17db      	asrs	r3, r3, #31
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <main+0x5c8>)
 8000c2e:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <main+0x5cc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a3b      	ldr	r2, [pc, #236]	; (8000d24 <main+0x5cc>)
 8000c38:	6013      	str	r3, [r2, #0]
					break;
 8000c3a:	e07a      	b.n	8000d32 <main+0x5da>
				case 5:
					USART1->DR = (((L%1000)%100)/10)+48;
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <main+0x5bc>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <main+0x5d0>)
 8000c42:	fb83 1302 	smull	r1, r3, r3, r2
 8000c46:	1199      	asrs	r1, r3, #6
 8000c48:	17d3      	asrs	r3, r2, #31
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <main+0x5d4>)
 8000c58:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5c:	1151      	asrs	r1, r2, #5
 8000c5e:	17da      	asrs	r2, r3, #31
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	2164      	movs	r1, #100	; 0x64
 8000c64:	fb01 f202 	mul.w	r2, r1, r2
 8000c68:	1a9a      	subs	r2, r3, r2
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <main+0x5b8>)
 8000c6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c70:	1099      	asrs	r1, r3, #2
 8000c72:	17d3      	asrs	r3, r2, #31
 8000c74:	1acb      	subs	r3, r1, r3
 8000c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <main+0x5c8>)
 8000c7c:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <main+0x5cc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <main+0x5cc>)
 8000c86:	6013      	str	r3, [r2, #0]
					break;
 8000c88:	e053      	b.n	8000d32 <main+0x5da>
				case 6:
					USART1->DR = (((L%1000)%100)%10)+48;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <main+0x5bc>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <main+0x5d0>)
 8000c90:	fb83 1302 	smull	r1, r3, r3, r2
 8000c94:	1199      	asrs	r1, r3, #6
 8000c96:	17d3      	asrs	r3, r2, #31
 8000c98:	1acb      	subs	r3, r1, r3
 8000c9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <main+0x5d4>)
 8000ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8000caa:	1151      	asrs	r1, r2, #5
 8000cac:	17da      	asrs	r2, r3, #31
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	2164      	movs	r1, #100	; 0x64
 8000cb2:	fb01 f202 	mul.w	r2, r1, r2
 8000cb6:	1a9a      	subs	r2, r3, r2
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <main+0x5b8>)
 8000cba:	fb83 1302 	smull	r1, r3, r3, r2
 8000cbe:	1099      	asrs	r1, r3, #2
 8000cc0:	17d3      	asrs	r3, r2, #31
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1ad1      	subs	r1, r2, r3
 8000cce:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <main+0x5c8>)
 8000cd4:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <main+0x5cc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <main+0x5cc>)
 8000cde:	6013      	str	r3, [r2, #0]
					break;
 8000ce0:	e027      	b.n	8000d32 <main+0x5da>
				case 7:
					USART1->DR = 0x0A;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <main+0x5c8>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	605a      	str	r2, [r3, #4]
					indexTX++;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <main+0x5cc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <main+0x5cc>)
 8000cf0:	6013      	str	r3, [r2, #0]
					break;
 8000cf2:	e01e      	b.n	8000d32 <main+0x5da>
				case 8:
					USART1->DR = 0x0D;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <main+0x5c8>)
 8000cf6:	220d      	movs	r2, #13
 8000cf8:	605a      	str	r2, [r3, #4]
					indexTX=0;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <main+0x5cc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
					break;
 8000d00:	e017      	b.n	8000d32 <main+0x5da>
				default:
					indexTX=0;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <main+0x5cc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
					break;
 8000d08:	e013      	b.n	8000d32 <main+0x5da>
 8000d0a:	bf00      	nop
 8000d0c:	20000048 	.word	0x20000048
 8000d10:	66666667 	.word	0x66666667
 8000d14:	20000070 	.word	0x20000070
 8000d18:	20000034 	.word	0x20000034
 8000d1c:	20000030 	.word	0x20000030
 8000d20:	40013800 	.word	0x40013800
 8000d24:	20000000 	.word	0x20000000
 8000d28:	10624dd3 	.word	0x10624dd3
 8000d2c:	51eb851f 	.word	0x51eb851f
			}
		}
 8000d30:	bf00      	nop
		// Lectura ADC
		if(ADC1->SR & ADC_SR_EOC){							// EOC=1? Preguntar si ya termino la conversion
 8000d32:	4b70      	ldr	r3, [pc, #448]	; (8000ef4 <main+0x79c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <main+0x5f0>
			value=ADC1->DR & ADC_DR_DATA;					// :DATA, Almacenar los datos de la conversion
 8000d3e:	4b6d      	ldr	r3, [pc, #436]	; (8000ef4 <main+0x79c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <main+0x7a0>)
 8000d46:	801a      	strh	r2, [r3, #0]
			//ref=refOffSet+(value/16);						// Modificacionde referencia
		};

		// Muestreo 5ms
		if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk || Ti==0){
 8000d48:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <main+0x7a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <main+0x606>
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <main+0x7a8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f ae69 	bne.w	8000a30 <main+0x2d8>
			SysTick->CTRL &=~SysTick_CTRL_ENABLE_Msk;				// Enable=0, Deshabilitar el contador
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <main+0x7a4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a66      	ldr	r2, [pc, #408]	; (8000efc <main+0x7a4>)
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	6013      	str	r3, [r2, #0]
			SysTick->LOAD =(10*9)-1;								// Contador
 8000d6a:	4b64      	ldr	r3, [pc, #400]	; (8000efc <main+0x7a4>)
 8000d6c:	2259      	movs	r2, #89	; 0x59
 8000d6e:	605a      	str	r2, [r3, #4]
			SysTick->CTRL |=SysTick_CTRL_ENABLE_Msk;				// Enable=1, Habilitar contador
 8000d70:	4b62      	ldr	r3, [pc, #392]	; (8000efc <main+0x7a4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a61      	ldr	r2, [pc, #388]	; (8000efc <main+0x7a4>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]
			if(Ti==1000){
 8000d7c:	4b60      	ldr	r3, [pc, #384]	; (8000f00 <main+0x7a8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d84:	f040 80b0 	bne.w	8000ee8 <main+0x790>
				Ti=0;
 8000d88:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <main+0x7a8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
				GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000d8e:	4b5d      	ldr	r3, [pc, #372]	; (8000f04 <main+0x7ac>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a5c      	ldr	r2, [pc, #368]	; (8000f04 <main+0x7ac>)
 8000d94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000d98:	60d3      	str	r3, [r2, #12]

				// Control PID
				int aux1= TIM3->CCR4;
 8000d9a:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <main+0x7b0>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	607b      	str	r3, [r7, #4]
				out= kp*(ref-L)+ ki*(ref-L+pastError)+kd*(ref-L-pastError);
 8000da0:	4b5a      	ldr	r3, [pc, #360]	; (8000f0c <main+0x7b4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <main+0x7b8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa9a 	bl	80002e4 <__aeabi_i2f>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <main+0x7bc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4610      	mov	r0, r2
 8000dba:	f7ff fae7 	bl	800038c <__aeabi_fmul>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461c      	mov	r4, r3
 8000dc2:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <main+0x7b4>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b52      	ldr	r3, [pc, #328]	; (8000f10 <main+0x7b8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa89 	bl	80002e4 <__aeabi_i2f>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <main+0x7c0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4610      	mov	r0, r2
 8000ddc:	f7ff f9ce 	bl	800017c <__addsf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <main+0x7c4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	4610      	mov	r0, r2
 8000dec:	f7ff face 	bl	800038c <__aeabi_fmul>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff f9c1 	bl	800017c <__addsf3>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <main+0x7b4>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <main+0x7b8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fa6b 	bl	80002e4 <__aeabi_i2f>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <main+0x7c0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4610      	mov	r0, r2
 8000e18:	f7ff f9ae 	bl	8000178 <__aeabi_fsub>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <main+0x7c8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4610      	mov	r0, r2
 8000e28:	f7ff fab0 	bl	800038c <__aeabi_fmul>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff f9a3 	bl	800017c <__addsf3>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <main+0x7cc>)
 8000e3c:	601a      	str	r2, [r3, #0]
				pastError+=(ref-L);
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <main+0x7b4>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <main+0x7b8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fa4b 	bl	80002e4 <__aeabi_i2f>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <main+0x7c0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f7ff f990 	bl	800017c <__addsf3>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <main+0x7c0>)
 8000e62:	601a      	str	r2, [r3, #0]
				if(out+aux1 >1023){
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fa3d 	bl	80002e4 <__aeabi_i2f>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <main+0x7cc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4610      	mov	r0, r2
 8000e74:	f7ff f982 	bl	800017c <__addsf3>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	492b      	ldr	r1, [pc, #172]	; (8000f28 <main+0x7d0>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc41 	bl	8000704 <__aeabi_fcmpgt>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <main+0x73a>
					TIM3->CCR4 = 1023;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <main+0x7b0>)
 8000e8a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e90:	e5ce      	b.n	8000a30 <main+0x2d8>
				}else if(out+aux1 <0){
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fa26 	bl	80002e4 <__aeabi_i2f>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <main+0x7cc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	f7ff f96b 	bl	800017c <__addsf3>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f04f 0100 	mov.w	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc0b 	bl	80006c8 <__aeabi_fcmplt>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <main+0x768>
					TIM3->CCR4 = 0;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <main+0x7b0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebe:	e5b7      	b.n	8000a30 <main+0x2d8>
				}else{
					TIM3->CCR4 += out;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <main+0x7b0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa09 	bl	80002dc <__aeabi_ui2f>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <main+0x7cc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f7ff f952 	bl	800017c <__addsf3>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <main+0x7b0>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc1b 	bl	8000718 <__aeabi_f2uiz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6423      	str	r3, [r4, #64]	; 0x40
 8000ee6:	e5a3      	b.n	8000a30 <main+0x2d8>
//						TIM3->CCR4 = 1023;
//					}
//				}

			}else{
				Ti++;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <main+0x7a8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <main+0x7a8>)
 8000ef0:	6013      	str	r3, [r2, #0]
		if(USART1->SR & USART_SR_RXNE){						// Recepcion
 8000ef2:	e59d      	b.n	8000a30 <main+0x2d8>
 8000ef4:	40012400 	.word	0x40012400
 8000ef8:	2000002c 	.word	0x2000002c
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	20000040 	.word	0x20000040
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	20000070 	.word	0x20000070
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000044 	.word	0x20000044
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000038 	.word	0x20000038
 8000f24:	2000003c 	.word	0x2000003c
 8000f28:	447fc000 	.word	0x447fc000

08000f2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopForever+0xe>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopForever+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f56:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000f5a:	f000 f811 	bl	8000f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5e:	f7ff fbfb 	bl	8000758 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
  ldr   r0, =_estack
 8000f64:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f70:	08000fe8 	.word	0x08000fe8
  ldr r2, =_sbss
 8000f74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f78:	2000007c 	.word	0x2000007c

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>
	...

08000f80 <__libc_init_array>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	2500      	movs	r5, #0
 8000f84:	4e0c      	ldr	r6, [pc, #48]	; (8000fb8 <__libc_init_array+0x38>)
 8000f86:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <__libc_init_array+0x3c>)
 8000f88:	1ba4      	subs	r4, r4, r6
 8000f8a:	10a4      	asrs	r4, r4, #2
 8000f8c:	42a5      	cmp	r5, r4
 8000f8e:	d109      	bne.n	8000fa4 <__libc_init_array+0x24>
 8000f90:	f000 f81a 	bl	8000fc8 <_init>
 8000f94:	2500      	movs	r5, #0
 8000f96:	4e0a      	ldr	r6, [pc, #40]	; (8000fc0 <__libc_init_array+0x40>)
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <__libc_init_array+0x44>)
 8000f9a:	1ba4      	subs	r4, r4, r6
 8000f9c:	10a4      	asrs	r4, r4, #2
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	d105      	bne.n	8000fae <__libc_init_array+0x2e>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fa8:	4798      	blx	r3
 8000faa:	3501      	adds	r5, #1
 8000fac:	e7ee      	b.n	8000f8c <__libc_init_array+0xc>
 8000fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb2:	4798      	blx	r3
 8000fb4:	3501      	adds	r5, #1
 8000fb6:	e7f2      	b.n	8000f9e <__libc_init_array+0x1e>
 8000fb8:	08000fe0 	.word	0x08000fe0
 8000fbc:	08000fe0 	.word	0x08000fe0
 8000fc0:	08000fe0 	.word	0x08000fe0
 8000fc4:	08000fe4 	.word	0x08000fe4

08000fc8 <_init>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr

08000fd4 <_fini>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr
