
Proyecto 1- Pantalla TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e2c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f5c  08000f5c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08000f5c  08000f5c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f5c  08000f5c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08000f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  200001e4  08001148  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08001148  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000054c  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000160  00000000  00000000  00020759  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  000208c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  00020950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe30  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000797  00000000  00000000  000307f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053e43  00000000  00000000  00030f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000018c  00000000  00000000  00084e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e4 	.word	0x200001e4
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f44 	.word	0x08000f44

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e8 	.word	0x200001e8
 800016c:	08000f44 	.word	0x08000f44

08000170 <main>:
                             {0,y,y,y,y,y,y,y,y,y,0},{0,0,0,y,y,y,y,y,y,y,y},{0,0,0,0,y,y,y,y,y,y,y},
                             {0,0,0,y,y,y,y,y,y,y,y},{0,y,y,y,y,y,y,y,y,y,0},{0,0,y,y,y,y,y,y,y,0,0},
                             {0,0,0,y,y,y,y,y,0,0,0},{0,0,0,0,y,y,y,0,0,0,0}};


int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

	//--Inicialización interface debug---------------------------------------------------------------------

	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;	        // AFIOEN = 1, activar reloj de modulo AFIO
 8000176:	4bb5      	ldr	r3, [pc, #724]	; (800044c <main+0x2dc>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4ab4      	ldr	r2, [pc, #720]	; (800044c <main+0x2dc>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;			// SWJ_CFG = 010 JTAG disabled y SW-DP enable
 8000182:	4bb3      	ldr	r3, [pc, #716]	; (8000450 <main+0x2e0>)
 8000184:	685b      	ldr	r3, [r3, #4]
 8000186:	4ab2      	ldr	r2, [pc, #712]	; (8000450 <main+0x2e0>)
 8000188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800018c:	6053      	str	r3, [r2, #4]

	//--Inicializacion de reloj externo a 72 Mhz-----------------------------------------------------------

	FLASH->ACR |=FLASH_ACR_LATENCY_1;			// Ajustar Latencia de memoria Flash en 2 (Debido al ajuste de alta frecuencia)
 800018e:	4bb1      	ldr	r3, [pc, #708]	; (8000454 <main+0x2e4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4ab0      	ldr	r2, [pc, #704]	; (8000454 <main+0x2e4>)
 8000194:	f043 0302 	orr.w	r3, r3, #2
 8000198:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON; 					// HSE0N = 1, Habilitar reloj externo
 800019a:	4bac      	ldr	r3, [pc, #688]	; (800044c <main+0x2dc>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4aab      	ldr	r2, [pc, #684]	; (800044c <main+0x2dc>)
 80001a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a4:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));   		// HSERDY = 1 ?, Esperar a que el reloj externo se estabilice
 80001a6:	bf00      	nop
 80001a8:	4ba8      	ldr	r3, [pc, #672]	; (800044c <main+0x2dc>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0f9      	beq.n	80001a8 <main+0x38>
    RCC->CFGR |= RCC_CFGR_PLLSRC; 				// PLLSRC=1, Seleccionar reloj externo como fuente de reloj de PLL
 80001b4:	4ba5      	ldr	r3, [pc, #660]	; (800044c <main+0x2dc>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4aa4      	ldr	r2, [pc, #656]	; (800044c <main+0x2dc>)
 80001ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001be:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;				// PLLMUL=7, Seleccionar 9 como factor PLL
 80001c0:	4ba2      	ldr	r3, [pc, #648]	; (800044c <main+0x2dc>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4aa1      	ldr	r2, [pc, #644]	; (800044c <main+0x2dc>)
 80001c6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001ca:	6053      	str	r3, [r2, #4]
    RCC->CR	  |= RCC_CR_PLLON;					// PLLON=1 Encender PLL
 80001cc:	4b9f      	ldr	r3, [pc, #636]	; (800044c <main+0x2dc>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a9e      	ldr	r2, [pc, #632]	; (800044c <main+0x2dc>)
 80001d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d6:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));			// PLLRDY=1 ? Esperar a que se ajuste el PLL
 80001d8:	bf00      	nop
 80001da:	4b9c      	ldr	r3, [pc, #624]	; (800044c <main+0x2dc>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <main+0x6a>
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; 			// PPRE1=0b100, Ajustar el prescaler de APB1, para obtener 36Mhz
 80001e6:	4b99      	ldr	r3, [pc, #612]	; (800044c <main+0x2dc>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	4a98      	ldr	r2, [pc, #608]	; (800044c <main+0x2dc>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_1;    				// SW=2, PLL seleccionado como reloj del sistema
 80001f2:	4b96      	ldr	r3, [pc, #600]	; (800044c <main+0x2dc>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4a95      	ldr	r2, [pc, #596]	; (800044c <main+0x2dc>)
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6053      	str	r3, [r2, #4]
    while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); 	// SWS=2? , Esperar a que el reloj del sistema se configure
 80001fe:	bf00      	nop
 8000200:	4b92      	ldr	r3, [pc, #584]	; (800044c <main+0x2dc>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f9      	beq.n	8000200 <main+0x90>

    //--Inicialización SP1-----------------------------------------------------------------------------------

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;         // SPI1EN=1, Activación de reloj SPI1
 800020c:	4b8f      	ldr	r3, [pc, #572]	; (800044c <main+0x2dc>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a8e      	ldr	r2, [pc, #568]	; (800044c <main+0x2dc>)
 8000212:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000216:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			// IOPAEN = 1, Habilitar reloj de GPIOA
 8000218:	4b8c      	ldr	r3, [pc, #560]	; (800044c <main+0x2dc>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a8b      	ldr	r2, [pc, #556]	; (800044c <main+0x2dc>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]

    // Configuración de pines

    GPIOA->CRL   = 0;                           // Limpiar configuración de puerto A
 8000224:	4b8c      	ldr	r3, [pc, #560]	; (8000458 <main+0x2e8>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
    // Configuración del CS
    GPIOA->CRL   |= GPIO_CRL_MODE4;            	// MODE4 = 0b11, Modo salida 50 MHz
 800022a:	4b8b      	ldr	r3, [pc, #556]	; (8000458 <main+0x2e8>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a8a      	ldr	r2, [pc, #552]	; (8000458 <main+0x2e8>)
 8000230:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000234:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF4_1;           	// CNF4= 0b10, Modo alternado push-pull
 8000236:	4b88      	ldr	r3, [pc, #544]	; (8000458 <main+0x2e8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a87      	ldr	r2, [pc, #540]	; (8000458 <main+0x2e8>)
 800023c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000240:	6013      	str	r3, [r2, #0]
    // Configuración de CLK
    GPIOA->CRL   |= GPIO_CRL_MODE5;            	// MODE5 = 0b11, Modo salida 50 MHz
 8000242:	4b85      	ldr	r3, [pc, #532]	; (8000458 <main+0x2e8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a84      	ldr	r2, [pc, #528]	; (8000458 <main+0x2e8>)
 8000248:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800024c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF5_1;           	// CNF5= 0b10, Modo alternado push-pull
 800024e:	4b82      	ldr	r3, [pc, #520]	; (8000458 <main+0x2e8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a81      	ldr	r2, [pc, #516]	; (8000458 <main+0x2e8>)
 8000254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000258:	6013      	str	r3, [r2, #0]
    // Configuración de MISO
    GPIOA->CRL   &= ~GPIO_CRL_MODE6;           	// MODE6 = 0b00, Modo de entrada
 800025a:	4b7f      	ldr	r3, [pc, #508]	; (8000458 <main+0x2e8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a7e      	ldr	r2, [pc, #504]	; (8000458 <main+0x2e8>)
 8000260:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000264:	6013      	str	r3, [r2, #0]
    GPIOA->CRL   |= GPIO_CRL_CNF6_1;           	// MODE6 = 0b10, Modo de entrada pull-up/pull-down
 8000266:	4b7c      	ldr	r3, [pc, #496]	; (8000458 <main+0x2e8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a7b      	ldr	r2, [pc, #492]	; (8000458 <main+0x2e8>)
 800026c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000270:	6013      	str	r3, [r2, #0]
    // Configuración de MOSI
    GPIOA->CRL 	 |= GPIO_CRL_MODE7;            	// MODE7 = 0b11, Modo salida 50 MHz
 8000272:	4b79      	ldr	r3, [pc, #484]	; (8000458 <main+0x2e8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a78      	ldr	r2, [pc, #480]	; (8000458 <main+0x2e8>)
 8000278:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800027c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL 	 |= GPIO_CRL_CNF7_1;           	// CNF7= 0b10, Modo alternado push-pull
 800027e:	4b76      	ldr	r3, [pc, #472]	; (8000458 <main+0x2e8>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a75      	ldr	r2, [pc, #468]	; (8000458 <main+0x2e8>)
 8000284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000288:	6013      	str	r3, [r2, #0]

    // Configuración

    SPI1->CR1    &= ~SPI_CR1_BIDIMODE;        	// BIDIMODE = 0b0, Modo unidereccional
 800028a:	4b74      	ldr	r3, [pc, #464]	; (800045c <main+0x2ec>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a73      	ldr	r2, [pc, #460]	; (800045c <main+0x2ec>)
 8000290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000294:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_DFF;             	// DFF = 0b0, Trama de datos de 8 bits
 8000296:	4b71      	ldr	r3, [pc, #452]	; (800045c <main+0x2ec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a70      	ldr	r2, [pc, #448]	; (800045c <main+0x2ec>)
 800029c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a0:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_RXONLY;          	// RXONLY = 0b0, Comunicación full duplex
 80002a2:	4b6e      	ldr	r3, [pc, #440]	; (800045c <main+0x2ec>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a6d      	ldr	r2, [pc, #436]	; (800045c <main+0x2ec>)
 80002a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002ac:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_SSM;              	// SSM = 0b1, CS por software
 80002ae:	4b6b      	ldr	r3, [pc, #428]	; (800045c <main+0x2ec>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a6a      	ldr	r2, [pc, #424]	; (800045c <main+0x2ec>)
 80002b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b8:	6013      	str	r3, [r2, #0]
    SPI1->CR1    &= ~SPI_CR1_LSBFIRST;        	// LSBFIRST = 0b0, Bit más significativo primero
 80002ba:	4b68      	ldr	r3, [pc, #416]	; (800045c <main+0x2ec>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a67      	ldr	r2, [pc, #412]	; (800045c <main+0x2ec>)
 80002c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002c4:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_BR_2;             	// BR= 0b100, PCLK/32 = 2.250 MHz
 80002c6:	4b65      	ldr	r3, [pc, #404]	; (800045c <main+0x2ec>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a64      	ldr	r2, [pc, #400]	; (800045c <main+0x2ec>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6013      	str	r3, [r2, #0]
    SPI1->CR1    |= SPI_CR1_MSTR;             	// MSRT = 0b1, Modo maestro
 80002d2:	4b62      	ldr	r3, [pc, #392]	; (800045c <main+0x2ec>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a61      	ldr	r2, [pc, #388]	; (800045c <main+0x2ec>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6013      	str	r3, [r2, #0]
    SPI1->CR2    |= SPI_CR2_SSOE;             	// SS0E = 0b1, Habilitar CS
 80002de:	4b5f      	ldr	r3, [pc, #380]	; (800045c <main+0x2ec>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	4a5e      	ldr	r2, [pc, #376]	; (800045c <main+0x2ec>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6053      	str	r3, [r2, #4]
    SPI1->CR1    |= SPI_CR1_SPE;              	// SPE = 0b1, Activar SPI
 80002ea:	4b5c      	ldr	r3, [pc, #368]	; (800045c <main+0x2ec>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a5b      	ldr	r2, [pc, #364]	; (800045c <main+0x2ec>)
 80002f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f4:	6013      	str	r3, [r2, #0]


    //--Configuracion Pin B0 (TFT_RS)-----------------------------------------------------------------
    GPIOB->CRL   = 0;                           // Limpiar configuración de puerto B
 80002f6:	4b5a      	ldr	r3, [pc, #360]	; (8000460 <main+0x2f0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;			// Habilitar reloj del Puerto B
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <main+0x2dc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <main+0x2dc>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
    GPIOB->CRL   |= GPIO_CRL_MODE0;            	// MODE0 = 0b11, Modo salida 50 MHz
 8000308:	4b55      	ldr	r3, [pc, #340]	; (8000460 <main+0x2f0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a54      	ldr	r2, [pc, #336]	; (8000460 <main+0x2f0>)
 800030e:	f043 0303 	orr.w	r3, r3, #3
 8000312:	6013      	str	r3, [r2, #0]
    GPIOB->CRL   &= ~GPIO_CRL_CNF0;           	// CNF0= 0b00, Modo General Purpose Push-pull
 8000314:	4b52      	ldr	r3, [pc, #328]	; (8000460 <main+0x2f0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a51      	ldr	r2, [pc, #324]	; (8000460 <main+0x2f0>)
 800031a:	f023 030c 	bic.w	r3, r3, #12
 800031e:	6013      	str	r3, [r2, #0]

    //--Configuracion Pin B3 (TFT_RST)-----------------------------------------------------------------
    GPIOB->CRL   |= GPIO_CRL_MODE1;            	// MODE3 = 0b11, Modo salida 50 MHz
 8000320:	4b4f      	ldr	r3, [pc, #316]	; (8000460 <main+0x2f0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a4e      	ldr	r2, [pc, #312]	; (8000460 <main+0x2f0>)
 8000326:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800032a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL   &= ~GPIO_CRL_CNF1;           	// CNF3= 0b00, Modo General Purpose Push-pull
 800032c:	4b4c      	ldr	r3, [pc, #304]	; (8000460 <main+0x2f0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a4b      	ldr	r2, [pc, #300]	; (8000460 <main+0x2f0>)
 8000332:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000336:	6013      	str	r3, [r2, #0]

    //Reset por hardware

    lowSPI_CS();
 8000338:	f000 fd3a 	bl	8000db0 <lowSPI_CS>
    highRST();
 800033c:	f000 fd70 	bl	8000e20 <highRST>
    wait_ms(10);
 8000340:	200a      	movs	r0, #10
 8000342:	f000 fd7b 	bl	8000e3c <wait_ms>
    lowRST();
 8000346:	f000 fd5d 	bl	8000e04 <lowRST>
    wait_ms(500);
 800034a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034e:	f000 fd75 	bl	8000e3c <wait_ms>
    highRST();
 8000352:	f000 fd65 	bl	8000e20 <highRST>
    wait_ms(50);
 8000356:	2032      	movs	r0, #50	; 0x32
 8000358:	f000 fd70 	bl	8000e3c <wait_ms>

    //sendSPIData();

    // Dato basura
    lowRS();
 800035c:	f000 fd36 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fd0f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000366:	2000      	movs	r0, #0
 8000368:	f000 fd0c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800036c:	f000 fd8c 	bl	8000e88 <alreadySend_SPIData>


    //Power Control 1
    lowRS();
 8000370:	f000 fd2c 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000374:	2000      	movs	r0, #0
 8000376:	f000 fd05 	bl	8000d84 <sendSPIData>
    sendSPIData(0x10);
 800037a:	2010      	movs	r0, #16
 800037c:	f000 fd02 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000380:	f000 fd82 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000384:	f000 fd30 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fcfb 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fcf8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000394:	f000 fd78 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 2
    lowRS();
 8000398:	f000 fd18 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fcf1 	bl	8000d84 <sendSPIData>
    sendSPIData(0x11);
 80003a2:	2011      	movs	r0, #17
 80003a4:	f000 fcee 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80003a8:	f000 fd6e 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80003ac:	f000 fd1c 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fce7 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 fce4 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80003bc:	f000 fd64 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 3
    lowRS();
 80003c0:	f000 fd04 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fcdd 	bl	8000d84 <sendSPIData>
    sendSPIData(0x12);
 80003ca:	2012      	movs	r0, #18
 80003cc:	f000 fcda 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80003d0:	f000 fd5a 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80003d4:	f000 fd08 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 fcd3 	bl	8000d84 <sendSPIData>
   	sendSPIData(0x00);
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 fcd0 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80003e4:	f000 fd50 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 4
    lowRS();
 80003e8:	f000 fcf0 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 fcc9 	bl	8000d84 <sendSPIData>
   	sendSPIData(0x13);
 80003f2:	2013      	movs	r0, #19
 80003f4:	f000 fcc6 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80003f8:	f000 fd46 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80003fc:	f000 fcf4 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fcbf 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fcbc 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800040c:	f000 fd3c 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 5
    lowRS();
 8000410:	f000 fcdc 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fcb5 	bl	8000d84 <sendSPIData>
    sendSPIData(0x14);
 800041a:	2014      	movs	r0, #20
 800041c:	f000 fcb2 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000420:	f000 fd32 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000424:	f000 fce0 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fcab 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fca8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000434:	f000 fd28 	bl	8000e88 <alreadySend_SPIData>

    //Power-on sequence----------------------------------------
    wait_ms(40);
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f000 fcff 	bl	8000e3c <wait_ms>

    //Power Control 2
    lowRS();
 800043e:	f000 fcc5 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000442:	2000      	movs	r0, #0
 8000444:	f000 fc9e 	bl	8000d84 <sendSPIData>
    sendSPIData(0x11);
 8000448:	2011      	movs	r0, #17
 800044a:	e00b      	b.n	8000464 <main+0x2f4>
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000
 8000454:	40022000 	.word	0x40022000
 8000458:	40010800 	.word	0x40010800
 800045c:	40013000 	.word	0x40013000
 8000460:	40010c00 	.word	0x40010c00
 8000464:	f000 fc8e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000468:	f000 fd0e 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 800046c:	f000 fcbc 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fc87 	bl	8000d84 <sendSPIData>
    sendSPIData(0x18);
 8000476:	2018      	movs	r0, #24
 8000478:	f000 fc84 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800047c:	f000 fd04 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 3
    lowRS();
 8000480:	f000 fca4 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000484:	2000      	movs	r0, #0
 8000486:	f000 fc7d 	bl	8000d84 <sendSPIData>
    sendSPIData(0x12);
 800048a:	2012      	movs	r0, #18
 800048c:	f000 fc7a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000490:	f000 fcfa 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000494:	f000 fca8 	bl	8000de8 <highRS>
    sendSPIData(0x61);
 8000498:	2061      	movs	r0, #97	; 0x61
 800049a:	f000 fc73 	bl	8000d84 <sendSPIData>
    sendSPIData(0x21);
 800049e:	2021      	movs	r0, #33	; 0x21
 80004a0:	f000 fc70 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80004a4:	f000 fcf0 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 4
    lowRS();
 80004a8:	f000 fc90 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 fc69 	bl	8000d84 <sendSPIData>
    sendSPIData(0x13);
 80004b2:	2013      	movs	r0, #19
 80004b4:	f000 fc66 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80004b8:	f000 fce6 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80004bc:	f000 fc94 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fc5f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x6f);
 80004c6:	206f      	movs	r0, #111	; 0x6f
 80004c8:	f000 fc5c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80004cc:	f000 fcdc 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 5
    lowRS();
 80004d0:	f000 fc7c 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fc55 	bl	8000d84 <sendSPIData>
    sendSPIData(0x14);
 80004da:	2014      	movs	r0, #20
 80004dc:	f000 fc52 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80004e0:	f000 fcd2 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80004e4:	f000 fc80 	bl	8000de8 <highRS>
    sendSPIData(0x49);
 80004e8:	2049      	movs	r0, #73	; 0x49
 80004ea:	f000 fc4b 	bl	8000d84 <sendSPIData>
    sendSPIData(0x5f);
 80004ee:	205f      	movs	r0, #95	; 0x5f
 80004f0:	f000 fc48 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80004f4:	f000 fcc8 	bl	8000e88 <alreadySend_SPIData>

    //Power Control 1
    lowRS();
 80004f8:	f000 fc68 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fc41 	bl	8000d84 <sendSPIData>
    sendSPIData(0x10);
 8000502:	2010      	movs	r0, #16
 8000504:	f000 fc3e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000508:	f000 fcbe 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 800050c:	f000 fc6c 	bl	8000de8 <highRS>
    sendSPIData(0x08);
 8000510:	2008      	movs	r0, #8
 8000512:	f000 fc37 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 fc34 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800051c:	f000 fcb4 	bl	8000e88 <alreadySend_SPIData>

    wait_ms(40);
 8000520:	2028      	movs	r0, #40	; 0x28
 8000522:	f000 fc8b 	bl	8000e3c <wait_ms>

    //Power Control 2
    lowRS();
 8000526:	f000 fc51 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fc2a 	bl	8000d84 <sendSPIData>
    sendSPIData(0x11);
 8000530:	2011      	movs	r0, #17
 8000532:	f000 fc27 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000536:	f000 fca7 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 800053a:	f000 fc55 	bl	8000de8 <highRS>
    sendSPIData(0x10);
 800053e:	2010      	movs	r0, #16
 8000540:	f000 fc20 	bl	8000d84 <sendSPIData>
    sendSPIData(0x3B);
 8000544:	203b      	movs	r0, #59	; 0x3b
 8000546:	f000 fc1d 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800054a:	f000 fc9d 	bl	8000e88 <alreadySend_SPIData>

    wait_ms(40);
 800054e:	2028      	movs	r0, #40	; 0x28
 8000550:	f000 fc74 	bl	8000e3c <wait_ms>

    //DRIVER_OUTPUT_CTRL
    lowRS();
 8000554:	f000 fc3a 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fc13 	bl	8000d84 <sendSPIData>
    sendSPIData(0x01);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fc10 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000564:	f000 fc90 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000568:	f000 fc3e 	bl	8000de8 <highRS>
    sendSPIData(0x01);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fc09 	bl	8000d84 <sendSPIData>
    sendSPIData(0x1C);
 8000572:	201c      	movs	r0, #28
 8000574:	f000 fc06 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000578:	f000 fc86 	bl	8000e88 <alreadySend_SPIData>

    //LCD_AC_DRIVING_CTRL
    lowRS();
 800057c:	f000 fc26 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fbff 	bl	8000d84 <sendSPIData>
    sendSPIData(0x02);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fbfc 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800058c:	f000 fc7c 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000590:	f000 fc2a 	bl	8000de8 <highRS>
    sendSPIData(0x01);
 8000594:	2001      	movs	r0, #1
 8000596:	f000 fbf5 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fbf2 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80005a0:	f000 fc72 	bl	8000e88 <alreadySend_SPIData>

    //ENTRY_MODE
    lowRS();
 80005a4:	f000 fc12 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fbeb 	bl	8000d84 <sendSPIData>
    sendSPIData(0x03);
 80005ae:	2003      	movs	r0, #3
 80005b0:	f000 fbe8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80005b4:	f000 fc68 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80005b8:	f000 fc16 	bl	8000de8 <highRS>
    sendSPIData(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 fbe1 	bl	8000d84 <sendSPIData>
    sendSPIData(0x38);
 80005c2:	2038      	movs	r0, #56	; 0x38
 80005c4:	f000 fbde 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80005c8:	f000 fc5e 	bl	8000e88 <alreadySend_SPIData>

    //DISP_CTRL1
    lowRS();
 80005cc:	f000 fbfe 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fbd7 	bl	8000d84 <sendSPIData>
    sendSPIData(0x07);
 80005d6:	2007      	movs	r0, #7
 80005d8:	f000 fbd4 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80005dc:	f000 fc54 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80005e0:	f000 fc02 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fbcd 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fbca 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80005f0:	f000 fc4a 	bl	8000e88 <alreadySend_SPIData>

    //BLANK_PERIOD_CTRL1
    lowRS();
 80005f4:	f000 fbea 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fbc3 	bl	8000d84 <sendSPIData>
    sendSPIData(0x08);
 80005fe:	2008      	movs	r0, #8
 8000600:	f000 fbc0 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000604:	f000 fc40 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000608:	f000 fbee 	bl	8000de8 <highRS>
    sendSPIData(0x08);
 800060c:	2008      	movs	r0, #8
 800060e:	f000 fbb9 	bl	8000d84 <sendSPIData>
    sendSPIData(0x08);
 8000612:	2008      	movs	r0, #8
 8000614:	f000 fbb6 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000618:	f000 fc36 	bl	8000e88 <alreadySend_SPIData>

    //FRAME_CYCLE_CTRL
    lowRS();
 800061c:	f000 fbd6 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fbaf 	bl	8000d84 <sendSPIData>
    sendSPIData(0x0B);
 8000626:	200b      	movs	r0, #11
 8000628:	f000 fbac 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800062c:	f000 fc2c 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000630:	f000 fbda 	bl	8000de8 <highRS>
    sendSPIData(0x11);
 8000634:	2011      	movs	r0, #17
 8000636:	f000 fba5 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fba2 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000640:	f000 fc22 	bl	8000e88 <alreadySend_SPIData>

    //INTERFACE_CTRL
    lowRS();
 8000644:	f000 fbc2 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fb9b 	bl	8000d84 <sendSPIData>
    sendSPIData(0x0C);
 800064e:	200c      	movs	r0, #12
 8000650:	f000 fb98 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000654:	f000 fc18 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000658:	f000 fbc6 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fb91 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fb8e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000668:	f000 fc0e 	bl	8000e88 <alreadySend_SPIData>

    //OSC_CTRL
    lowRS();
 800066c:	f000 fbae 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb87 	bl	8000d84 <sendSPIData>
    sendSPIData(0x0F);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 fb84 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800067c:	f000 fc04 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000680:	f000 fbb2 	bl	8000de8 <highRS>
    sendSPIData(0x0D);
 8000684:	200d      	movs	r0, #13
 8000686:	f000 fb7d 	bl	8000d84 <sendSPIData>
    sendSPIData(0x01);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fb7a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000690:	f000 fbfa 	bl	8000e88 <alreadySend_SPIData>

    //VCI_RECYCLING
    lowRS();
 8000694:	f000 fb9a 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb73 	bl	8000d84 <sendSPIData>
    sendSPIData(0x15);
 800069e:	2015      	movs	r0, #21
 80006a0:	f000 fb70 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80006a4:	f000 fbf0 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80006a8:	f000 fb9e 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fb69 	bl	8000d84 <sendSPIData>
    sendSPIData(0x20);
 80006b2:	2020      	movs	r0, #32
 80006b4:	f000 fb66 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80006b8:	f000 fbe6 	bl	8000e88 <alreadySend_SPIData>

    //RAM_ADDR_SET1
    lowRS();
 80006bc:	f000 fb86 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fb5f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x20);
 80006c6:	2020      	movs	r0, #32
 80006c8:	f000 fb5c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80006cc:	f000 fbdc 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80006d0:	f000 fb8a 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fb55 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fb52 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80006e0:	f000 fbd2 	bl	8000e88 <alreadySend_SPIData>

    //RAM_ADDR_SET2
    lowRS();
 80006e4:	f000 fb72 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fb4b 	bl	8000d84 <sendSPIData>
    sendSPIData(0x21);
 80006ee:	2021      	movs	r0, #33	; 0x21
 80006f0:	f000 fb48 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80006f4:	f000 fbc8 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80006f8:	f000 fb76 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fb41 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 fb3e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000708:	f000 fbbe 	bl	8000e88 <alreadySend_SPIData>


    //Set GRAM area------------------------------------

    //GATE_SCAN_CTRL
    lowRS();
 800070c:	f000 fb5e 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fb37 	bl	8000d84 <sendSPIData>
    sendSPIData(0x30);
 8000716:	2030      	movs	r0, #48	; 0x30
 8000718:	f000 fb34 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800071c:	f000 fbb4 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000720:	f000 fb62 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fb2d 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fb2a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000730:	f000 fbaa 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_SCROLL_CTRL1
    lowRS();
 8000734:	f000 fb4a 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fb23 	bl	8000d84 <sendSPIData>
    sendSPIData(0x31);
 800073e:	2031      	movs	r0, #49	; 0x31
 8000740:	f000 fb20 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000744:	f000 fba0 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000748:	f000 fb4e 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fb19 	bl	8000d84 <sendSPIData>
    sendSPIData(0xDB);
 8000752:	20db      	movs	r0, #219	; 0xdb
 8000754:	f000 fb16 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000758:	f000 fb96 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_SCROLL_CTRL2
    lowRS();
 800075c:	f000 fb36 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fb0f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x32);
 8000766:	2032      	movs	r0, #50	; 0x32
 8000768:	f000 fb0c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800076c:	f000 fb8c 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000770:	f000 fb3a 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fb05 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 fb02 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000780:	f000 fb82 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_SCROLL_CTRL3
    lowRS();
 8000784:	f000 fb22 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fafb 	bl	8000d84 <sendSPIData>
    sendSPIData(0x33);
 800078e:	2033      	movs	r0, #51	; 0x33
 8000790:	f000 faf8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000794:	f000 fb78 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000798:	f000 fb26 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 800079c:	2000      	movs	r0, #0
 800079e:	f000 faf1 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 faee 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80007a8:	f000 fb6e 	bl	8000e88 <alreadySend_SPIData>

    //PARTIAL_DRIVING_POS1
    lowRS();
 80007ac:	f000 fb0e 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fae7 	bl	8000d84 <sendSPIData>
    sendSPIData(0x34);
 80007b6:	2034      	movs	r0, #52	; 0x34
 80007b8:	f000 fae4 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80007bc:	f000 fb64 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80007c0:	f000 fb12 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fadd 	bl	8000d84 <sendSPIData>
    sendSPIData(0xDB);
 80007ca:	20db      	movs	r0, #219	; 0xdb
 80007cc:	f000 fada 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80007d0:	f000 fb5a 	bl	8000e88 <alreadySend_SPIData>

    //PARTIAL_DRIVING_POS2
    lowRS();
 80007d4:	f000 fafa 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fad3 	bl	8000d84 <sendSPIData>
    sendSPIData(0x35);
 80007de:	2035      	movs	r0, #53	; 0x35
 80007e0:	f000 fad0 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80007e4:	f000 fb50 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80007e8:	f000 fafe 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fac9 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fac6 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80007f8:	f000 fb46 	bl	8000e88 <alreadySend_SPIData>

    //HORIZONTAL_WINDOW_ADDR1
    lowRS();
 80007fc:	f000 fae6 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fabf 	bl	8000d84 <sendSPIData>
    sendSPIData(0x36);
 8000806:	2036      	movs	r0, #54	; 0x36
 8000808:	f000 fabc 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800080c:	f000 fb3c 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000810:	f000 faea 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fab5 	bl	8000d84 <sendSPIData>
    sendSPIData(0xAF);
 800081a:	20af      	movs	r0, #175	; 0xaf
 800081c:	f000 fab2 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000820:	f000 fb32 	bl	8000e88 <alreadySend_SPIData>

    //HORIZONTAL_WINDOW_ADDR2
    lowRS();
 8000824:	f000 fad2 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 faab 	bl	8000d84 <sendSPIData>
    sendSPIData(0x37);
 800082e:	2037      	movs	r0, #55	; 0x37
 8000830:	f000 faa8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000834:	f000 fb28 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000838:	f000 fad6 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 faa1 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fa9e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000848:	f000 fb1e 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_WINDOW_ADDR1
    lowRS();
 800084c:	f000 fabe 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fa97 	bl	8000d84 <sendSPIData>
    sendSPIData(0x38);
 8000856:	2038      	movs	r0, #56	; 0x38
 8000858:	f000 fa94 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800085c:	f000 fb14 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000860:	f000 fac2 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fa8d 	bl	8000d84 <sendSPIData>
    sendSPIData(0xDB);
 800086a:	20db      	movs	r0, #219	; 0xdb
 800086c:	f000 fa8a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000870:	f000 fb0a 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_WINDOW_ADDR2
    lowRS();
 8000874:	f000 faaa 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fa83 	bl	8000d84 <sendSPIData>
    sendSPIData(0x39);
 800087e:	2039      	movs	r0, #57	; 0x39
 8000880:	f000 fa80 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000884:	f000 fb00 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000888:	f000 faae 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fa79 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 fa76 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000898:	f000 faf6 	bl	8000e88 <alreadySend_SPIData>

    // Set GAMMA curve-------------------------------------
    //GAMMA_CTRL1
    lowRS();
 800089c:	f000 fa96 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fa6f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x50);
 80008a6:	2050      	movs	r0, #80	; 0x50
 80008a8:	f000 fa6c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80008ac:	f000 faec 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80008b0:	f000 fa9a 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 fa65 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fa62 	bl	8000d84 <sendSPIData>

    //GAMMA_CTRL2
    lowRS();
 80008c0:	f000 fa84 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fa5d 	bl	8000d84 <sendSPIData>
    sendSPIData(0x51);
 80008ca:	2051      	movs	r0, #81	; 0x51
 80008cc:	f000 fa5a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80008d0:	f000 fada 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80008d4:	f000 fa88 	bl	8000de8 <highRS>
    sendSPIData(0x08);
 80008d8:	2008      	movs	r0, #8
 80008da:	f000 fa53 	bl	8000d84 <sendSPIData>
    sendSPIData(0x08);
 80008de:	2008      	movs	r0, #8
 80008e0:	f000 fa50 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80008e4:	f000 fad0 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL3
    lowRS();
 80008e8:	f000 fa70 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fa49 	bl	8000d84 <sendSPIData>
    sendSPIData(0x52);
 80008f2:	2052      	movs	r0, #82	; 0x52
 80008f4:	f000 fa46 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80008f8:	f000 fac6 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80008fc:	f000 fa74 	bl	8000de8 <highRS>
    sendSPIData(0x08);
 8000900:	2008      	movs	r0, #8
 8000902:	f000 fa3f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x0A);
 8000906:	200a      	movs	r0, #10
 8000908:	f000 fa3c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800090c:	f000 fabc 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL4
    lowRS();
 8000910:	f000 fa5c 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fa35 	bl	8000d84 <sendSPIData>
    sendSPIData(0x53);
 800091a:	2053      	movs	r0, #83	; 0x53
 800091c:	f000 fa32 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000920:	f000 fab2 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000924:	f000 fa60 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fa2b 	bl	8000d84 <sendSPIData>
    sendSPIData(0x0A);
 800092e:	200a      	movs	r0, #10
 8000930:	f000 fa28 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000934:	f000 faa8 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL5
    lowRS();
 8000938:	f000 fa48 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fa21 	bl	8000d84 <sendSPIData>
    sendSPIData(0x54);
 8000942:	2054      	movs	r0, #84	; 0x54
 8000944:	f000 fa1e 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000948:	f000 fa9e 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 800094c:	f000 fa4c 	bl	8000de8 <highRS>
    sendSPIData(0x0A);
 8000950:	200a      	movs	r0, #10
 8000952:	f000 fa17 	bl	8000d84 <sendSPIData>
    sendSPIData(0x08);
 8000956:	2008      	movs	r0, #8
 8000958:	f000 fa14 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 800095c:	f000 fa94 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL6
    lowRS();
 8000960:	f000 fa34 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fa0d 	bl	8000d84 <sendSPIData>
    sendSPIData(0x55);
 800096a:	2055      	movs	r0, #85	; 0x55
 800096c:	f000 fa0a 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000970:	f000 fa8a 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000974:	f000 fa38 	bl	8000de8 <highRS>
    sendSPIData(0x08);
 8000978:	2008      	movs	r0, #8
 800097a:	f000 fa03 	bl	8000d84 <sendSPIData>
    sendSPIData(0x08);
 800097e:	2008      	movs	r0, #8
 8000980:	f000 fa00 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000984:	f000 fa80 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL7
    lowRS();
 8000988:	f000 fa20 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f9f9 	bl	8000d84 <sendSPIData>
    sendSPIData(0x56);
 8000992:	2056      	movs	r0, #86	; 0x56
 8000994:	f000 f9f6 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000998:	f000 fa76 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 800099c:	f000 fa24 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f9ef 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f9ec 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80009ac:	f000 fa6c 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL8
    lowRS();
 80009b0:	f000 fa0c 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f9e5 	bl	8000d84 <sendSPIData>
    sendSPIData(0x57);
 80009ba:	2057      	movs	r0, #87	; 0x57
 80009bc:	f000 f9e2 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80009c0:	f000 fa62 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80009c4:	f000 fa10 	bl	8000de8 <highRS>
    sendSPIData(0x0A);
 80009c8:	200a      	movs	r0, #10
 80009ca:	f000 f9db 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f9d8 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80009d4:	f000 fa58 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL9
    lowRS();
 80009d8:	f000 f9f8 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f9d1 	bl	8000d84 <sendSPIData>
    sendSPIData(0x58);
 80009e2:	2058      	movs	r0, #88	; 0x58
 80009e4:	f000 f9ce 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80009e8:	f000 fa4e 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 80009ec:	f000 f9fc 	bl	8000de8 <highRS>
    sendSPIData(0x07);
 80009f0:	2007      	movs	r0, #7
 80009f2:	f000 f9c7 	bl	8000d84 <sendSPIData>
    sendSPIData(0x10);
 80009f6:	2010      	movs	r0, #16
 80009f8:	f000 f9c4 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 80009fc:	f000 fa44 	bl	8000e88 <alreadySend_SPIData>

    //GAMMA_CTRL10
    lowRS();
 8000a00:	f000 f9e4 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 f9bd 	bl	8000d84 <sendSPIData>
    sendSPIData(0x59);
 8000a0a:	2059      	movs	r0, #89	; 0x59
 8000a0c:	f000 f9ba 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a10:	f000 fa3a 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000a14:	f000 f9e8 	bl	8000de8 <highRS>
    sendSPIData(0x07);
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f000 f9b3 	bl	8000d84 <sendSPIData>
    sendSPIData(0x10);
 8000a1e:	2010      	movs	r0, #16
 8000a20:	f000 f9b0 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a24:	f000 fa30 	bl	8000e88 <alreadySend_SPIData>

    //-----------------------------------
    //DISP_CTRL1
    lowRS();
 8000a28:	f000 f9d0 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f9a9 	bl	8000d84 <sendSPIData>
    sendSPIData(0x07);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f000 f9a6 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a38:	f000 fa26 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000a3c:	f000 f9d4 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 f99f 	bl	8000d84 <sendSPIData>
    sendSPIData(0x12);
 8000a46:	2012      	movs	r0, #18
 8000a48:	f000 f99c 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a4c:	f000 fa1c 	bl	8000e88 <alreadySend_SPIData>

    wait_ms(50);
 8000a50:	2032      	movs	r0, #50	; 0x32
 8000a52:	f000 f9f3 	bl	8000e3c <wait_ms>

    //DISP_CTRL1
    lowRS();
 8000a56:	f000 f9b9 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f992 	bl	8000d84 <sendSPIData>
    sendSPIData(0x07);
 8000a60:	2007      	movs	r0, #7
 8000a62:	f000 f98f 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a66:	f000 fa0f 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000a6a:	f000 f9bd 	bl	8000de8 <highRS>
    sendSPIData(0x10);
 8000a6e:	2010      	movs	r0, #16
 8000a70:	f000 f988 	bl	8000d84 <sendSPIData>
    sendSPIData(0x17);
 8000a74:	2017      	movs	r0, #23
 8000a76:	f000 f985 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a7a:	f000 fa05 	bl	8000e88 <alreadySend_SPIData>

    // Initialize variables
    //setBackgroundColor( COLOR_BLACK );

    //ENTRY MODE
    lowRS();
 8000a7e:	f000 f9a5 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f97e 	bl	8000d84 <sendSPIData>
    sendSPIData(0x03);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f97b 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000a8e:	f000 f9fb 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000a92:	f000 f9a9 	bl	8000de8 <highRS>
    sendSPIData(0x10);
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 f974 	bl	8000d84 <sendSPIData>
    sendSPIData(0x18);
 8000a9c:	2018      	movs	r0, #24
 8000a9e:	f000 f971 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000aa2:	f000 f9f1 	bl	8000e88 <alreadySend_SPIData>

    //HORIZONTAL_WINDOW_ADDR1
    lowRS();
 8000aa6:	f000 f991 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 f96a 	bl	8000d84 <sendSPIData>
    sendSPIData(0x36);
 8000ab0:	2036      	movs	r0, #54	; 0x36
 8000ab2:	f000 f967 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000ab6:	f000 f9e7 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000aba:	f000 f995 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f960 	bl	8000d84 <sendSPIData>
    sendSPIData(0xAF);
 8000ac4:	20af      	movs	r0, #175	; 0xaf
 8000ac6:	f000 f95d 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000aca:	f000 f9dd 	bl	8000e88 <alreadySend_SPIData>

    //HORIZONTAL_WINDOW_ADDR2
    lowRS();
 8000ace:	f000 f97d 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f956 	bl	8000d84 <sendSPIData>
    sendSPIData(0x37);
 8000ad8:	2037      	movs	r0, #55	; 0x37
 8000ada:	f000 f953 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000ade:	f000 f9d3 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000ae2:	f000 f981 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f94c 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f949 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000af2:	f000 f9c9 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_WINDOW_ADDR1
    lowRS();
 8000af6:	f000 f969 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f942 	bl	8000d84 <sendSPIData>
    sendSPIData(0x38);
 8000b00:	2038      	movs	r0, #56	; 0x38
 8000b02:	f000 f93f 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b06:	f000 f9bf 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000b0a:	f000 f96d 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f938 	bl	8000d84 <sendSPIData>
    sendSPIData(0xDB);
 8000b14:	20db      	movs	r0, #219	; 0xdb
 8000b16:	f000 f935 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b1a:	f000 f9b5 	bl	8000e88 <alreadySend_SPIData>

    //VERTICAL_WINDOW_ADDR2
    lowRS();
 8000b1e:	f000 f955 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f92e 	bl	8000d84 <sendSPIData>
    sendSPIData(0x39);
 8000b28:	2039      	movs	r0, #57	; 0x39
 8000b2a:	f000 f92b 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b2e:	f000 f9ab 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000b32:	f000 f959 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f924 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f921 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b42:	f000 f9a1 	bl	8000e88 <alreadySend_SPIData>

    //RAM_ADDR_SET1
    lowRS();
 8000b46:	f000 f941 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f91a 	bl	8000d84 <sendSPIData>
    sendSPIData(0x20);
 8000b50:	2020      	movs	r0, #32
 8000b52:	f000 f917 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b56:	f000 f997 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000b5a:	f000 f945 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f910 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f90d 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b6a:	f000 f98d 	bl	8000e88 <alreadySend_SPIData>

    //RAM_ADDR_SET2
    lowRS();
 8000b6e:	f000 f92d 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f906 	bl	8000d84 <sendSPIData>
    sendSPIData(0x21);
 8000b78:	2021      	movs	r0, #33	; 0x21
 8000b7a:	f000 f903 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b7e:	f000 f983 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000b82:	f000 f931 	bl	8000de8 <highRS>
    sendSPIData(0x00);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f8fc 	bl	8000d84 <sendSPIData>
    sendSPIData(0x00);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 f8f9 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000b92:	f000 f979 	bl	8000e88 <alreadySend_SPIData>

    //Inicio de Transferencia de datos
    //WRITE DATA TO GRAM
    lowRS();
 8000b96:	f000 f919 	bl	8000dcc <lowRS>
    sendSPIData(0x00);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8f2 	bl	8000d84 <sendSPIData>
    sendSPIData(0x22);
 8000ba0:	2022      	movs	r0, #34	; 0x22
 8000ba2:	f000 f8ef 	bl	8000d84 <sendSPIData>
    alreadySend_SPIData();
 8000ba6:	f000 f96f 	bl	8000e88 <alreadySend_SPIData>

    highRS();
 8000baa:	f000 f91d 	bl	8000de8 <highRS>
//    }

    unsigned int aux;

    while (1){
         for(int i=0; i<176; i++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e0df      	b.n	8000d74 <main+0xc04>
    		for(int j=0; j<220; j++ ){
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	e0d5      	b.n	8000d66 <main+0xbf6>
    			if(j<220/2 && i<176/2){
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b6d      	cmp	r3, #109	; 0x6d
 8000bbe:	dc31      	bgt.n	8000c24 <main+0xab4>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b57      	cmp	r3, #87	; 0x57
 8000bc4:	dc2e      	bgt.n	8000c24 <main+0xab4>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b68      	cmp	r3, #104	; 0x68
 8000bca:	dd24      	ble.n	8000c16 <main+0xaa6>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b73      	cmp	r3, #115	; 0x73
 8000bd0:	dc21      	bgt.n	8000c16 <main+0xaa6>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b52      	cmp	r3, #82	; 0x52
 8000bd6:	dd1e      	ble.n	8000c16 <main+0xaa6>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b5d      	cmp	r3, #93	; 0x5d
 8000bdc:	dc1b      	bgt.n	8000c16 <main+0xaa6>
    				    aux=pacman[j-(220/2)-5] [i-(176/2)-5];
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f1a3 015d 	sub.w	r1, r3, #93	; 0x5d
 8000bea:	4865      	ldr	r0, [pc, #404]	; (8000d80 <main+0xc10>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000bfc:	607b      	str	r3, [r7, #4]
    				    sendSPIData(aux>>8);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f8bd 	bl	8000d84 <sendSPIData>
    				    sendSPIData(aux);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f8b8 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c14:	e0a4      	b.n	8000d60 <main+0xbf0>
    				}else{
    					sendSPIData(0x00);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f8b4 	bl	8000d84 <sendSPIData>
    					sendSPIData(0x00);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f8b1 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c22:	e09d      	b.n	8000d60 <main+0xbf0>
    				}
    			}else if(j<220/2 && i>=176/2){
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b6d      	cmp	r3, #109	; 0x6d
 8000c28:	dc31      	bgt.n	8000c8e <main+0xb1e>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b57      	cmp	r3, #87	; 0x57
 8000c2e:	dd2e      	ble.n	8000c8e <main+0xb1e>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b68      	cmp	r3, #104	; 0x68
 8000c34:	dd24      	ble.n	8000c80 <main+0xb10>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b73      	cmp	r3, #115	; 0x73
 8000c3a:	dc21      	bgt.n	8000c80 <main+0xb10>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b52      	cmp	r3, #82	; 0x52
 8000c40:	dd1e      	ble.n	8000c80 <main+0xb10>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b5d      	cmp	r3, #93	; 0x5d
 8000c46:	dc1b      	bgt.n	8000c80 <main+0xb10>
    				    aux=pacman[j-(220/2)-5] [i-(176/2)-5];
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1a3 015d 	sub.w	r1, r3, #93	; 0x5d
 8000c54:	484a      	ldr	r0, [pc, #296]	; (8000d80 <main+0xc10>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c66:	607b      	str	r3, [r7, #4]
    				    sendSPIData(aux>>8);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f888 	bl	8000d84 <sendSPIData>
    				    sendSPIData(aux);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f883 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c7e:	e06f      	b.n	8000d60 <main+0xbf0>
    				}else{
						sendSPIData(0xFF);
 8000c80:	20ff      	movs	r0, #255	; 0xff
 8000c82:	f000 f87f 	bl	8000d84 <sendSPIData>
						sendSPIData(0xFF);
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	f000 f87c 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c8c:	e068      	b.n	8000d60 <main+0xbf0>
    				}
    			}else if (j>=220/2 && i<176/2){
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b6d      	cmp	r3, #109	; 0x6d
 8000c92:	dd31      	ble.n	8000cf8 <main+0xb88>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b57      	cmp	r3, #87	; 0x57
 8000c98:	dc2e      	bgt.n	8000cf8 <main+0xb88>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b68      	cmp	r3, #104	; 0x68
 8000c9e:	dd24      	ble.n	8000cea <main+0xb7a>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b73      	cmp	r3, #115	; 0x73
 8000ca4:	dc21      	bgt.n	8000cea <main+0xb7a>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b52      	cmp	r3, #82	; 0x52
 8000caa:	dd1e      	ble.n	8000cea <main+0xb7a>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b5d      	cmp	r3, #93	; 0x5d
 8000cb0:	dc1b      	bgt.n	8000cea <main+0xb7a>
    				    aux=pacman[j-(220/2)-5] [i-(176/2)-5];
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f1a3 015d 	sub.w	r1, r3, #93	; 0x5d
 8000cbe:	4830      	ldr	r0, [pc, #192]	; (8000d80 <main+0xc10>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000cd0:	607b      	str	r3, [r7, #4]
    				    sendSPIData(aux>>8);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f853 	bl	8000d84 <sendSPIData>
    				    sendSPIData(aux);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f84e 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000ce8:	e03a      	b.n	8000d60 <main+0xbf0>
    				}else{
						sendSPIData(0x00);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f84a 	bl	8000d84 <sendSPIData>
						sendSPIData(0x1F);
 8000cf0:	201f      	movs	r0, #31
 8000cf2:	f000 f847 	bl	8000d84 <sendSPIData>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000cf6:	e033      	b.n	8000d60 <main+0xbf0>
    				}
    			}else if (j>=220/2 && i>=176/2){
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b6d      	cmp	r3, #109	; 0x6d
 8000cfc:	dd30      	ble.n	8000d60 <main+0xbf0>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b57      	cmp	r3, #87	; 0x57
 8000d02:	dd2d      	ble.n	8000d60 <main+0xbf0>
    				if((j>=(220/2-5)) && (j<(220/2+6)) && (i>=(176/2-5)) && (i<(176/2+6))){
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b68      	cmp	r3, #104	; 0x68
 8000d08:	dd24      	ble.n	8000d54 <main+0xbe4>
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b73      	cmp	r3, #115	; 0x73
 8000d0e:	dc21      	bgt.n	8000d54 <main+0xbe4>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b52      	cmp	r3, #82	; 0x52
 8000d14:	dd1e      	ble.n	8000d54 <main+0xbe4>
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b5d      	cmp	r3, #93	; 0x5d
 8000d1a:	dc1b      	bgt.n	8000d54 <main+0xbe4>
    				    aux=pacman[j-(220/2)-5] [i-(176/2)-5];
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1a3 015d 	sub.w	r1, r3, #93	; 0x5d
 8000d28:	4815      	ldr	r0, [pc, #84]	; (8000d80 <main+0xc10>)
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000d3a:	607b      	str	r3, [r7, #4]
    				    sendSPIData(aux>>8);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f81e 	bl	8000d84 <sendSPIData>
    				    sendSPIData(aux);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f819 	bl	8000d84 <sendSPIData>
 8000d52:	e005      	b.n	8000d60 <main+0xbf0>
    				}else{
						sendSPIData(0x86);
 8000d54:	2086      	movs	r0, #134	; 0x86
 8000d56:	f000 f815 	bl	8000d84 <sendSPIData>
						sendSPIData(0x7d);
 8000d5a:	207d      	movs	r0, #125	; 0x7d
 8000d5c:	f000 f812 	bl	8000d84 <sendSPIData>
    		for(int j=0; j<220; j++ ){
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2bdb      	cmp	r3, #219	; 0xdb
 8000d6a:	f77f af26 	ble.w	8000bba <main+0xa4a>
         for(int i=0; i<176; i++){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2baf      	cmp	r3, #175	; 0xaf
 8000d78:	f77f af1c 	ble.w	8000bb4 <main+0xa44>
 8000d7c:	e717      	b.n	8000bae <main+0xa3e>
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000

08000d84 <sendSPIData>:
    		}
        }
    }
}

void sendSPIData(char data){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	while (!(SPI1->SR & SPI_SR_TXE));      	// TXE = 1?, Esperar que el buffer Tx esté vacío
 8000d8e:	bf00      	nop
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <sendSPIData+0x28>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f9      	beq.n	8000d90 <sendSPIData+0xc>
	SPI1->DR = data;						// Enviar Datos SPI
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <sendSPIData+0x28>)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	60d3      	str	r3, [r2, #12]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40013000 	.word	0x40013000

08000db0 <lowSPI_CS>:
void lowSPI_CS(void){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	SPI1->CR1 &= ~SPI_CR1_SSI;           	// SSI = 0b0, Activar CS
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <lowSPI_CS+0x18>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <lowSPI_CS+0x18>)
 8000dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40013000 	.word	0x40013000

08000dcc <lowRS>:
void highSPI_CS(void){
	SPI1->CR1 |= SPI_CR1_SSI;           	// SSI = 0b0, Desactivar CS
}
void lowRS(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~GPIO_ODR_ODR0;			// Poner PB0 en 0
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <lowRS+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <lowRS+0x18>)
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <highRS>:
void highRS(void){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_ODR0;			// Poner PB0 en 1
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <highRS+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <highRS+0x18>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <lowRST>:
void lowRST(void){
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~GPIO_ODR_ODR1;			// Poner PB1 en 0
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <lowRST+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <lowRST+0x18>)
 8000e0e:	f023 0302 	bic.w	r3, r3, #2
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <highRST>:
void highRST(void){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_ODR1;			// Poner PB1 en 1
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <highRST+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <highRST+0x18>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40010c00 	.word	0x40010c00

08000e3c <wait_ms>:


void wait_ms(unsigned int time){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	SysTick->LOAD =(time*9000)-1; 							// Load=Time*8-1, ajustar valor del contador
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f242 3228 	movw	r2, #9000	; 0x2328
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <wait_ms+0x48>)
 8000e50:	3b01      	subs	r3, #1
 8000e52:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |=SysTick_CTRL_ENABLE_Msk;				// Enable=1, Habilitar contador
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <wait_ms+0x48>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <wait_ms+0x48>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]
	while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));	// COUNTFLAG=1?,Preguntar si ya se alcanzo 0
 8000e60:	bf00      	nop
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <wait_ms+0x48>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <wait_ms+0x26>
	SysTick->CTRL &=~SysTick_CTRL_ENABLE_Msk;				// Enable=0, Deshabilitar el contador
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <wait_ms+0x48>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <wait_ms+0x48>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <alreadySend_SPIData>:
void alreadySend_SPIData(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	while((SPI1->SR & SPI_SR_BSY));	                       // BUSY=0?,Preguntar si está ocupado
 8000e8c:	bf00      	nop
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <alreadySend_SPIData+0x1c>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f9      	bne.n	8000e8e <alreadySend_SPIData+0x6>
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000

08000ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ed2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000ed6:	f000 f811 	bl	8000efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff f949 	bl	8000170 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   r0, =_estack
 8000ee0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000eec:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 8000ef0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000ef4:	20000200 	.word	0x20000200

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <__libc_init_array>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	2500      	movs	r5, #0
 8000f00:	4e0c      	ldr	r6, [pc, #48]	; (8000f34 <__libc_init_array+0x38>)
 8000f02:	4c0d      	ldr	r4, [pc, #52]	; (8000f38 <__libc_init_array+0x3c>)
 8000f04:	1ba4      	subs	r4, r4, r6
 8000f06:	10a4      	asrs	r4, r4, #2
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	d109      	bne.n	8000f20 <__libc_init_array+0x24>
 8000f0c:	f000 f81a 	bl	8000f44 <_init>
 8000f10:	2500      	movs	r5, #0
 8000f12:	4e0a      	ldr	r6, [pc, #40]	; (8000f3c <__libc_init_array+0x40>)
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <__libc_init_array+0x44>)
 8000f16:	1ba4      	subs	r4, r4, r6
 8000f18:	10a4      	asrs	r4, r4, #2
 8000f1a:	42a5      	cmp	r5, r4
 8000f1c:	d105      	bne.n	8000f2a <__libc_init_array+0x2e>
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f24:	4798      	blx	r3
 8000f26:	3501      	adds	r5, #1
 8000f28:	e7ee      	b.n	8000f08 <__libc_init_array+0xc>
 8000f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f2e:	4798      	blx	r3
 8000f30:	3501      	adds	r5, #1
 8000f32:	e7f2      	b.n	8000f1a <__libc_init_array+0x1e>
 8000f34:	08000f5c 	.word	0x08000f5c
 8000f38:	08000f5c 	.word	0x08000f5c
 8000f3c:	08000f5c 	.word	0x08000f5c
 8000f40:	08000f60 	.word	0x08000f60

08000f44 <_init>:
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	bf00      	nop
 8000f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4a:	bc08      	pop	{r3}
 8000f4c:	469e      	mov	lr, r3
 8000f4e:	4770      	bx	lr

08000f50 <_fini>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	bf00      	nop
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr
